import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
#----------------------------------------------------------------------
# Sourced From Online Templates, Guides & Github
#----------------------------------------------------------------------
# License: GPL (http://www.gnu.org/licenses/gpl-3.0.html)
# Based on code from which Many Addons Use!
#----------------------------------------------------------------------
if 64 - 64: i11iIiiIii
import urllib
import urllib2
import datetime
import shutil
import re
import os
import xbmcplugin
import xbmcgui
import xbmcaddon
import xbmcvfs
import traceback
import cookielib
import base64
from addon . common . net import Net
from BeautifulSoup import BeautifulStoneSoup , BeautifulSoup , BeautifulSOAP
try :
 import json
except :
 import simplejson as json
import SimpleDownloader as downloader
import time
import requests
if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
o0OO00 = xbmcgui . Dialog ( )
if 78 - 78: i11i . oOooOoO0Oo0O
if 10 - 10: IIiI1I11i11
ooOO00oOo = {
 'Accept' : 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
 }
if 92 - 92: O0O / oo000 % IiIi11iIIi1Ii / o0OOO - iiiiIi11i . Ii1I
IiiIII111iI = [ 'alldebrid.com' , 'allmyvideos.net' , 'allvid.ch' , 'auengine.com' , 'beststreams.net' , 'briskfile.com' , 'castamp.com' , 'clicknupload.com' , 'clicknupload.me' , 'clicknupload.link' , 'cloudy.ec' , 'cloudzilla.to' , 'neodrive.co' , 'crunchyroll.com' , 'daclips.in' , 'daclips.com' , 'dailymotion.com' , 'divxstage.eu' , 'divxstage.net' , 'divxstage.to' , 'couldtime.to' , 'ecostream.tv' , 'exashare.com' , 'facebook.com' , 'fastplay.sx' , 'filehoot.com' , 'filenuke.com' , 'filepup.net' , 'filmshowonline.net' , 'flashx.tv' , 'plus.google.com' , 'googlevideo.com' , 'picasaweb.google.com' , 'googleusercontent.com' , 'googledrive.com' , 'gorillavid.in' , 'gorillavid.com' , 'gorillavid.in' , 'grifthost.com' , 'hugefiles.net' , 'idowatch.net' , 'indavideo.hu' , 'ishared.eu' , 'jetload.tv' , 'kingfiles.net' , 'letwatch.us' , 'letwatch.to' , 'vidshare.us' , 'mail.ru' , 'my.mail.ru' , 'videoapi.my.mail.ru' , 'api.video.mail.ru' , 'mega-debrid.eu' , 'megamp4.net' , 'mersalaayitten.com' , 'movdivx.com' , 'movpod.net' , 'movpod.in' , 'movshare.net' , 'wholecloud.net' , 'mp4engine.com' , 'mp4stream.com' , 'mp4upload.com' , 'myvidstream.net' , 'nosvideo.com' , 'noslocker.com' , 'auroravid.to' , 'novamov.com' , 'nowvideo.sx' , 'nowvideo.eu' , 'nowvideo.ch' , 'nowvideo.sx' , 'nowvideo.co' , 'nowvideo.li' , 'nowvideo.ec' , 'nowvideo.at' , 'nowvideo.fo' , 'ok.ru' , 'odnoklassniki.ru' , 'openload.io' , 'openload.co' , 'play44.net' , 'played.to' , 'playhd.video' , 'playhd.fo' , 'playu.net' , 'playu.me' , 'playwire.com' , 'Premiumize.me' , 'primeshare.tv' , 'promptfile.com' , 'purevid.com' , 'rapidvideo.ws' , 'rapidvideo.com' , 'api.real-debrid.com' , 'premium.rpnet.biz' , 'rutube.ru' , 'shared2.me' , 'shared.sx' , 'sharerepo.com' , 'sharesix.com' , 'simply-debrid.com' , 'speedplay.xyz' , 'speedplay.us' , 'speedplay3.pw' , 'speedvideo.net' , 'stagevu.com' , 'streamcloud.eu' , 'streamin.to' , 'teramixer.com' , 'thevideo.me' , 'thevideos.tv' , 'toltsd-fel.tk' , 'trollvid.net' , 'tune.pk' , 'tusfiles.net' , 'twitch.tv' , 'up2stream.com' , 'upload.af' , 'uploadc.com' , 'uploadc.ch' , 'zalaa.com' , 'uploadx.org' , 'uptobox.com' , 'uptostream.com' , 'userfiles.com' , 'userscloud.com' , 'veehd.com' , 'veoh.com' , 'vid.ag' , 'vidbull.com' , 'vidcrazy.net' , 'uploadcrazy.net' , 'thevideobee.to' , 'videoboxer.co' , 'vidgg.to' , 'vid.gg' , 'videohut.to' , 'videomega.tv' , 'videoraj.to' , 'videorev.cc' , 'videosky.to' , 'video.tt' , 'videoweed.es' , 'bitvid.sx' , 'videoweed.com' , 'videowood.tv' , 'byzoo.org' , 'playpanda.net' , 'videozoo.me' , 'videowing.me' , 'videowing.me' , 'easyvideo.me' , 'play44.net' , 'playbb.me' , 'video44.net' , 'vidio.sx' , 'vid.me' , 'vidspot.net' , 'vidto.me' , 'vidup.me' , 'vidup.org' , 'vidzi.tv' , 'vimeo.com' , 'vivo.sx' , 'vk.com' , 'vkpass.com' , 'vodlocker.com' , 'vshare.io' , 'vshare.eu' , 'watchers.to' , 'watchonline.to' , 'watchvideo.us' , 'watchvideo2.us' , 'watchvideo3.us' , 'watchvideo4.us' , 'watchvideo5.us' , 'watchvideo6.us' , 'watchvideo7.us' , 'watchvideo8.us' , 'watchvideo9.us' , 'weshare.me' , 'xvidstage.com' , 'youlol.biz' , 'shitmovie.com' , 'yourupload.com' , 'youtube.com' , 'youtu.be' , 'youwatch.org' , 'api.zevera.com' , 'zettahost.tv' , 'zstream.to' ]
if 34 - 34: iii1I1I / O00oOoOoO0o0O . O0oo0OO0 + Oo0ooO0oo0oO . I1i1iI1i - II
Oo = [ 'plugin.video.dramasonline' , 'plugin.video.f4mTester' , 'plugin.video.shahidmbcnet' , 'plugin.video.SportsDevil' , 'plugin.stream.vaughnlive.tv' , 'plugin.video.ZemTV-shani' ]
if 27 - 27: Oo0ooO0oo0oO * OoooooooOO + iii1I1I * II - i11iIiiIii - O0oo0OO0
class IiiiIiI1iIiI1 ( urllib2 . HTTPErrorProcessor ) :
 def http_response ( self , request , response ) :
  return response
 https_response = http_response
 if 85 - 85: O0O
iIi1IIii11I = 'aHR0cDovL2FqYnVpbGRzLnVrL3BhdWxzd29ybGQvaG9tZS54bWw=' . decode ( 'base64' )
if 84 - 84: iIii1I11I1II1 . Oo0ooO0oo0oO / Oo0ooO0oo0oO % Oo0ooO0oo0oO
i11 = xbmcaddon . Addon ( 'plugin.video.pauls_world' )
I11 = i11 . getAddonInfo ( 'version' )
Oo0o0000o0o0 = xbmc . translatePath ( i11 . getAddonInfo ( 'profile' ) . decode ( 'utf-8' ) )
oOo0oooo00o = xbmc . translatePath ( i11 . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
oO0o0o0ooO0oO = os . path . join ( Oo0o0000o0o0 , 'favorites' )
oo0o0O00 = os . path . join ( Oo0o0000o0o0 , 'history' )
if 68 - 68: Ii1I . oOooOoO0Oo0O / O0oo0OO0
oOOoo = os . path . join ( Oo0o0000o0o0 , 'list_revision' )
I1IiIiiIII = os . path . join ( oOo0oooo00o , 'icon.png' )
iI11 = os . path . join ( oOo0oooo00o , 'fanart.jpg' )
iII111ii = os . path . join ( Oo0o0000o0o0 , 'source_file' )
i1iIIi1 = Oo0o0000o0o0
if 50 - 50: i11iIiiIii - O00oOoOoO0o0O
downloader = downloader . SimpleDownloader ( )
oo0Ooo0 = i11 . getSetting ( 'debug' )
if os . path . exists ( oO0o0o0ooO0oO ) == True :
 I1I11I1I1I = open ( oO0o0o0ooO0oO ) . read ( )
else : I1I11I1I1I = [ ]
if os . path . exists ( iII111ii ) == True :
 OooO0OO = open ( iII111ii ) . read ( )
else : OooO0OO = [ ]
if 28 - 28: i11i
if 28 - 28: iIii1I11I1II1 - i1IIi
def OO ( string ) :
 if oo0Ooo0 == 'true' :
  xbmc . log ( "[addon.live.projectm]: %s" % ( I11 , string ) )
  if 55 - 55: O0O / o0OOO * Ii1I
  if 86 - 86: i11iIiiIii + O00oOoOoO0o0O + II * iii1I1I + IiIi11iIIi1Ii
def oOoO ( url , headers = None ) :
 try :
  headers = { 'User-agent' : 'MyAgent' }
  oOo = urllib2 . Request ( url , None , headers )
  oOoOoO = urllib2 . urlopen ( oOo )
  ii1I = oOoOoO . read ( )
  oOoOoO . close ( )
  return ii1I
 except urllib2 . URLError , OooO0 :
  OO ( 'URL: ' + url )
  if hasattr ( OooO0 , 'code' ) :
   OO ( 'We failed with error code - %s.' % OooO0 . code )
   xbmc . executebuiltin ( "XBMC.Notification(Pauls World,We failed with error code - " + str ( OooO0 . code ) + ",10000," + I1IiIiiIII + ")" )
  elif hasattr ( OooO0 , 'reason' ) :
   OO ( 'We failed to reach a server.' )
   OO ( 'Reason: %s' % OooO0 . reason )
   xbmc . executebuiltin ( "XBMC.Notification(Pauls World,We failed to reach a server. - " + str ( OooO0 . reason ) + ",10000," + I1IiIiiIII + ")" )
   if 35 - 35: Ii1I % I1i1iI1i % i11iIiiIii / OoooooooOO
   if 13 - 13: i1IIi - O00oOoOoO0o0O % iiiiIi11i / iIii1I11I1II1 % O0oo0OO0
def oo ( ) :
 OO ( "CPIndex" )
 O0o0Oo ( iIi1IIii11I , '' )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 78 - 78: iIii1I11I1II1 - O00oOoOoO0o0O * O0O + IiIi11iIIi1Ii + O0oo0OO0 + O0oo0OO0
def I11I11i1I ( url ) :
 oOo = urllib2 . Request ( url )
 oOo . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3' )
 oOoOoO = ''
 ii11i1iIII = ''
 try :
  oOoOoO = urllib2 . urlopen ( oOo )
  ii11i1iIII = oOoOoO . read ( )
  oOoOoO . close ( )
 except : pass
 if ii11i1iIII != '' :
  return ii11i1iIII
 else :
  ii11i1iIII = 'Opened'
  return ii11i1iIII
  if 3 - 3: i1IIi / oOooOoO0Oo0O % iii1I1I * i11iIiiIii / O0 * iii1I1I
def III1ii1iII ( ) :
 if os . path . exists ( oO0o0o0ooO0oO ) == True :
  oo0oooooO0 ( 'Favorites' , 'url' , 4 , os . path . join ( oOo0oooo00o , 'resources' , 'favorite.png' ) , iI11 , '' , '' , '' , '' )
 if i11 . getSetting ( "browse_xml_database" ) == "true" :
  oo0oooooO0 ( 'XML Database' , 'http://xbmcplus.xb.funpic.de/www-data/filesystem/' , 15 , I1IiIiiIII , iI11 , '' , '' , '' , '' )
 if i11 . getSetting ( "browse_community" ) == "true" :
  oo0oooooO0 ( 'Community Files' , 'community_files' , 16 , I1IiIiiIII , iI11 , '' , '' , '' , '' )
 if os . path . exists ( oo0o0O00 ) == True :
  oo0oooooO0 ( 'Search History' , 'history' , 25 , os . path . join ( oOo0oooo00o , 'resources' , 'favorite.png' ) , iI11 , '' , '' , '' , '' )
 if i11 . getSetting ( "searchyt" ) == "true" :
  oo0oooooO0 ( 'Search:Youtube' , 'youtube' , 25 , I1IiIiiIII , iI11 , '' , '' , '' , '' )
 if i11 . getSetting ( "searchDM" ) == "true" :
  oo0oooooO0 ( 'Search:dailymotion' , 'dmotion' , 25 , I1IiIiiIII , iI11 , '' , '' , '' , '' )
 if i11 . getSetting ( "PulsarM" ) == "true" :
  oo0oooooO0 ( 'Pulsar:IMDB' , 'IMDBidplay' , 27 , I1IiIiiIII , iI11 , '' , '' , '' , '' )
 if os . path . exists ( iII111ii ) == True :
  i11Iiii = json . loads ( open ( iII111ii , "r" ) . read ( ) )
  if 23 - 23: IiIi11iIIi1Ii . i11i
  if len ( i11Iiii ) > 1 :
   for Oo0O0OOOoo in i11Iiii :
    if 95 - 95: O0O % iiiiIi11i . O0
    if isinstance ( Oo0O0OOOoo , list ) :
     oo0oooooO0 ( Oo0O0OOOoo [ 0 ] . encode ( 'utf-8' ) , Oo0O0OOOoo [ 1 ] . encode ( 'utf-8' ) , 1 , I1IiIiiIII , iI11 , '' , '' , '' , '' , 'source' )
    else :
     I1i1I = I1IiIiiIII
     oOO00oOO = iI11
     OoOo = ''
     iI = ''
     credits = ''
     o00O = ''
     if Oo0O0OOOoo . has_key ( 'thumbnail' ) :
      I1i1I = Oo0O0OOOoo [ 'thumbnail' ]
     if Oo0O0OOOoo . has_key ( 'fanart' ) :
      oOO00oOO = Oo0O0OOOoo [ 'fanart' ]
     if Oo0O0OOOoo . has_key ( 'description' ) :
      OoOo = Oo0O0OOOoo [ 'description' ]
     if Oo0O0OOOoo . has_key ( 'date' ) :
      iI = Oo0O0OOOoo [ 'date' ]
     if Oo0O0OOOoo . has_key ( 'genre' ) :
      o00O = Oo0O0OOOoo [ 'genre' ]
     if Oo0O0OOOoo . has_key ( 'credits' ) :
      credits = Oo0O0OOOoo [ 'credits' ]
     oo0oooooO0 ( Oo0O0OOOoo [ 'title' ] . encode ( 'utf-8' ) , Oo0O0OOOoo [ 'url' ] . encode ( 'utf-8' ) , 1 , I1i1I , oOO00oOO , OoOo , o00O , iI , credits , 'source' )
     if 69 - 69: iiiiIi11i % I1i1iI1i - IiIi11iIIi1Ii + I1i1iI1i - O0 % OoooooooOO
  else :
   if len ( i11Iiii ) == 1 :
    if isinstance ( i11Iiii [ 0 ] , list ) :
     O0o0Oo ( i11Iiii [ 0 ] [ 1 ] . encode ( 'utf-8' ) , iI11 )
    else :
     O0o0Oo ( i11Iiii [ 0 ] [ 'url' ] , i11Iiii [ 0 ] [ 'fanart' ] )
     if 31 - 31: i11i - Ii1I . I1i1iI1i % oo000 - O0
     if 4 - 4: i11i / II . O0oo0OO0
def O0oo0OO0oOOOo ( url = None ) :
 if url is None :
  if not i11 . getSetting ( "new_file_source" ) == "" :
   i1i1i11IIi = i11 . getSetting ( 'new_file_source' ) . decode ( 'utf-8' )
  elif not i11 . getSetting ( "new_url_source" ) == "" :
   i1i1i11IIi = i11 . getSetting ( 'new_url_source' ) . decode ( 'utf-8' )
 else :
  i1i1i11IIi = url
 if i1i1i11IIi == '' or i1i1i11IIi is None :
  return
 OO ( 'Adding New Source: ' + i1i1i11IIi . encode ( 'utf-8' ) )
 if 33 - 33: IiIi11iIIi1Ii + Ii1I * O0O - IIiI1I11i11 / iiiiIi11i % O00oOoOoO0o0O
 II1i1IiiIIi11 = None
 ii1I = iI1Ii11iII1 ( i1i1i11IIi )
 print 'source_url' , i1i1i11IIi
 if isinstance ( ii1I , BeautifulSOAP ) :
  if ii1I . find ( 'channels_info' ) :
   II1i1IiiIIi11 = ii1I . channels_info
  elif ii1I . find ( 'items_info' ) :
   II1i1IiiIIi11 = ii1I . items_info
 if II1i1IiiIIi11 :
  Oo0O0O0ooO0O = { }
  Oo0O0O0ooO0O [ 'url' ] = i1i1i11IIi
  try : Oo0O0O0ooO0O [ 'title' ] = II1i1IiiIIi11 . title . string
  except : pass
  try : Oo0O0O0ooO0O [ 'thumbnail' ] = II1i1IiiIIi11 . thumbnail . string
  except : pass
  try : Oo0O0O0ooO0O [ 'fanart' ] = II1i1IiiIIi11 . fanart . string
  except : pass
  try : Oo0O0O0ooO0O [ 'genre' ] = II1i1IiiIIi11 . genre . string
  except : pass
  try : Oo0O0O0ooO0O [ 'description' ] = II1i1IiiIIi11 . description . string
  except : pass
  try : Oo0O0O0ooO0O [ 'date' ] = II1i1IiiIIi11 . date . string
  except : pass
  try : Oo0O0O0ooO0O [ 'credits' ] = II1i1IiiIIi11 . credits . string
  except : pass
 else :
  if '/' in i1i1i11IIi :
   IIIIii = i1i1i11IIi . split ( '/' ) [ - 1 ] . split ( '.' ) [ 0 ]
  if '\\' in i1i1i11IIi :
   IIIIii = i1i1i11IIi . split ( '\\' ) [ - 1 ] . split ( '.' ) [ 0 ]
  if '%' in IIIIii :
   IIIIii = urllib . unquote_plus ( IIIIii )
  O0o0 = xbmc . Keyboard ( IIIIii , 'Displayed Name, Rename?' )
  O0o0 . doModal ( )
  if ( O0o0 . isConfirmed ( ) == False ) :
   return
  OO00Oo = O0o0 . getText ( )
  if len ( OO00Oo ) == 0 :
   return
  Oo0O0O0ooO0O = { }
  Oo0O0O0ooO0O [ 'title' ] = OO00Oo
  Oo0O0O0ooO0O [ 'url' ] = i1i1i11IIi
  Oo0O0O0ooO0O [ 'fanart' ] = oOO00oOO
  if 51 - 51: Oo0ooO0oo0oO * IiIi11iIIi1Ii + iii1I1I + O0O
 if os . path . exists ( iII111ii ) == False :
  o0O0O00 = [ ]
  o0O0O00 . append ( Oo0O0O0ooO0O )
  o000o = open ( iII111ii , "w" )
  o000o . write ( json . dumps ( o0O0O00 ) )
  o000o . close ( )
 else :
  i11Iiii = json . loads ( open ( iII111ii , "r" ) . read ( ) )
  i11Iiii . append ( Oo0O0O0ooO0O )
  o000o = open ( iII111ii , "w" )
  o000o . write ( json . dumps ( i11Iiii ) )
  o000o . close ( )
 i11 . setSetting ( 'new_url_source' , "" )
 i11 . setSetting ( 'new_file_source' , "" )
 xbmc . executebuiltin ( "XBMC.Notification(Pauls World,New source added.,5000," + I1IiIiiIII + ")" )
 if not url is None :
  if 'xbmcplus.xb.funpic.de' in url :
   xbmc . executebuiltin ( "XBMC.Container.Update(%s?mode=14,replace)" % sys . argv [ 0 ] )
  elif 'community-links' in url :
   xbmc . executebuiltin ( "XBMC.Container.Update(%s?mode=10,replace)" % sys . argv [ 0 ] )
 else : i11 . openSettings ( )
 if 7 - 7: II * O0O % iiiiIi11i . Oo0ooO0oo0oO
def Ii1iIiII1ii1 ( url ) :
 ooOooo000oOO = xbmcgui . Dialog ( )
 Oo0oOOo = ooOooo000oOO . input ( 'SEARCH - Item Not Found? Then Look Manually!' , type = xbmcgui . INPUT_ALPHANUM )
 Oo0OoO00oOO0o = Oo0oOOo . lower ( )
 if Oo0OoO00oOO0o == '' :
  pass
 else :
  OOO00O ( Oo0OoO00oOO0o , url )
  if 84 - 84: iiiiIi11i * O0O / iii1I1I - O0
def OOO00O ( Search_name , url ) :
 IiI1 = I11I11i1I ( url )
 if IiI1 != 'Failed' :
  Oo0O00Oo0o0 = re . compile ( '<channel>.+?<name>(.+?)</name>.+?<thumbnail>(.+?)</thumbnail>.+?<externallink>(.+?)</externallink>.+?<fanart>(.+?)</fanart>.+?</channel>' , re . DOTALL ) . findall ( IiI1 )
  for O00O0oOO00O00 , i1 , url , oOO00oOO in Oo0O00Oo0o0 :
   if not 'http:' in url :
    pass
   else :
    OOO00O ( Search_name , url )
  Oo00 = re . compile ( '<title>(.+?)</title>.+?<link>(.+?)</link>.+?<thumbnail>(.+?)</thumbnail>.+?<fanart>(.+?)</fanart>' , re . DOTALL ) . findall ( IiI1 )
  for O00O0oOO00O00 , url , i1 , oOO00oOO in Oo00 :
   if 'http:' in url :
    if Search_name . lower ( ) in O00O0oOO00O00 . lower ( ) :
     i1i ( url , O00O0oOO00O00 , i1 , oOO00oOO , '' , '' , '' , '' , None , '' , 1 )
     if 50 - 50: Oo0ooO0oo0oO
     if 14 - 14: iii1I1I % O0O * iii1I1I
def iII ( name ) :
 i11Iiii = json . loads ( open ( iII111ii , "r" ) . read ( ) )
 for oO00o0 in range ( len ( i11Iiii ) ) :
  if isinstance ( i11Iiii [ oO00o0 ] , list ) :
   if i11Iiii [ oO00o0 ] [ 0 ] == name :
    del i11Iiii [ oO00o0 ]
    o000o = open ( iII111ii , "w" )
    o000o . write ( json . dumps ( i11Iiii ) )
    o000o . close ( )
    break
  else :
   if i11Iiii [ oO00o0 ] [ 'title' ] == name :
    del i11Iiii [ oO00o0 ]
    o000o = open ( iII111ii , "w" )
    o000o . write ( json . dumps ( i11Iiii ) )
    o000o . close ( )
    break
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 55 - 55: IIiI1I11i11 + iIii1I11I1II1 / oo000 * iiiiIi11i - i11iIiiIii - O00oOoOoO0o0O
 if 25 - 25: o0OOO
 if 7 - 7: i1IIi / oOooOoO0Oo0O * I1i1iI1i . Oo0ooO0oo0oO . iIii1I11I1II1
def iIii ( url , browse = False ) :
 if url is None :
  url = 'http://xbmcplus.xb.funpic.de/www-data/filesystem/'
 ooo0O = BeautifulSoup ( oOoO ( url ) , convertEntities = BeautifulSoup . HTML_ENTITIES )
 for Oo0O0OOOoo in ooo0O ( 'a' ) :
  oOoO0o00OO0 = Oo0O0OOOoo [ 'href' ]
  if not oOoO0o00OO0 . startswith ( '?' ) :
   O00O0oOO00O00 = Oo0O0OOOoo . string
   if O00O0oOO00O00 not in [ 'Parent Directory' , 'recycle_bin/' ] :
    if oOoO0o00OO0 . endswith ( '/' ) :
     if browse :
      oo0oooooO0 ( O00O0oOO00O00 , url + oOoO0o00OO0 , 15 , I1IiIiiIII , oOO00oOO , '' , '' , '' )
     else :
      oo0oooooO0 ( O00O0oOO00O00 , url + oOoO0o00OO0 , 14 , I1IiIiiIII , oOO00oOO , '' , '' , '' )
    elif oOoO0o00OO0 . endswith ( '.xml' ) :
     if browse :
      oo0oooooO0 ( O00O0oOO00O00 , url + oOoO0o00OO0 , 1 , I1IiIiiIII , oOO00oOO , '' , '' , '' , '' , 'download' )
     else :
      if os . path . exists ( iII111ii ) == True :
       if O00O0oOO00O00 in OooO0OO :
        oo0oooooO0 ( O00O0oOO00O00 + ' (in use)' , url + oOoO0o00OO0 , 11 , I1IiIiiIII , oOO00oOO , '' , '' , '' , '' , 'download' )
       else :
        oo0oooooO0 ( O00O0oOO00O00 , url + oOoO0o00OO0 , 11 , I1IiIiiIII , oOO00oOO , '' , '' , '' , '' , 'download' )
      else :
       oo0oooooO0 ( O00O0oOO00O00 , url + oOoO0o00OO0 , 11 , I1IiIiiIII , oOO00oOO , '' , '' , '' , '' , 'download' )
       if 7 - 7: Ii1I + I1i1iI1i + O0
       if 9 - 9: i11i . IiIi11iIIi1Ii - II / IiIi11iIIi1Ii
def I11OoOoOOOoOO ( browse = False ) :
 ii1ii11IIIiiI = 'http://community-links.googlecode.com/svn/trunk/'
 ooo0O = BeautifulSoup ( oOoO ( ii1ii11IIIiiI ) , convertEntities = BeautifulSoup . HTML_ENTITIES )
 O00OOOoOoo0O = ooo0O ( 'ul' ) [ 0 ] ( 'li' ) [ 1 : ]
 for Oo0O0OOOoo in O00OOOoOoo0O :
  O00O0oOO00O00 = Oo0O0OOOoo ( 'a' ) [ 0 ] [ 'href' ]
  if browse :
   oo0oooooO0 ( O00O0oOO00O00 , ii1ii11IIIiiI + O00O0oOO00O00 , 1 , I1IiIiiIII , oOO00oOO , '' , '' , '' , '' , 'download' )
  else :
   oo0oooooO0 ( O00O0oOO00O00 , ii1ii11IIIiiI + O00O0oOO00O00 , 11 , I1IiIiiIII , oOO00oOO , '' , '' , '' , '' , 'download' )
   if 77 - 77: O0oo0OO0 % O0oo0OO0 * iiiiIi11i - i11iIiiIii
   if 93 - 93: OoooooooOO / oOooOoO0Oo0O % i11iIiiIii + o0OOO * O0O
def iI1Ii11iII1 ( url , data = None ) :
 print 'getsoup' , url , data
 if url . startswith ( 'http://' ) or url . startswith ( 'https://' ) :
  data = oOoO ( url )
  if re . search ( "#EXTM3U" , data ) or 'm3u' in url :
   print 'found m3u data' , data
   return data
   if 15 - 15: iii1I1I . O0O / IIiI1I11i11 + iii1I1I
 elif data == None :
  if xbmcvfs . exists ( url ) :
   if url . startswith ( "smb://" ) or url . startswith ( "nfs://" ) :
    Ooo = xbmcvfs . copy ( url , os . path . join ( Oo0o0000o0o0 , 'temp' , 'sorce_temp.txt' ) )
    if Ooo :
     data = open ( os . path . join ( Oo0o0000o0o0 , 'temp' , 'sorce_temp.txt' ) , "r" ) . read ( )
     xbmcvfs . delete ( os . path . join ( Oo0o0000o0o0 , 'temp' , 'sorce_temp.txt' ) )
    else :
     OO ( "failed to copy from smb:" )
   else :
    data = open ( url , 'r' ) . read ( )
    if re . match ( "#EXTM3U" , data ) or 'm3u' in url :
     print 'found m3u data' , data
     return data
  else :
   OO ( "Soup Data not found!" )
   return
 return BeautifulSOAP ( data , convertEntities = BeautifulStoneSoup . XML_ENTITIES )
 if 62 - 62: Ii1I / O0O + O00oOoOoO0o0O / O0O . i11i
 if 68 - 68: i11iIiiIii % o0OOO + i11iIiiIii
def O0o0Oo ( url , fanart ) :
 print 'url-getData' , url
 iii = "List"
 if 1 - 1: IIiI1I11i11 / IiIi11iIIi1Ii % O0oo0OO0 * Oo0ooO0oo0oO . i11iIiiIii
 ooo0O = iI1Ii11iII1 ( url )
 if 2 - 2: o0OOO * iii1I1I - iIii1I11I1II1 + oOooOoO0Oo0O . iiiiIi11i % O0oo0OO0
 if isinstance ( ooo0O , BeautifulSOAP ) :
  if len ( ooo0O ( 'layoutype' ) ) > 0 :
   iii = "Thumbnail"
   if 92 - 92: O0oo0OO0
  if len ( ooo0O ( 'channels' ) ) > 0 :
   IIiIiiIi = ooo0O ( 'channel' )
   for O000oo in IIiIiiIi :
    if 20 - 20: Ii1I % O00oOoOoO0o0O / O00oOoOoO0o0O + O00oOoOoO0o0O
    III1IiiI = ''
    iIi1 = 0
    try :
     III1IiiI = O000oo ( 'externallink' ) [ 0 ] . string
     iIi1 = len ( O000oo ( 'externallink' ) )
    except : pass
    if 8 - 8: iiiiIi11i * oo000 - O00oOoOoO0o0O - O0O * Ii1I % oOooOoO0Oo0O
    if iIi1 > 1 : III1IiiI = ''
    if 48 - 48: O0
    O00O0oOO00O00 = O000oo ( 'name' ) [ 0 ] . string
    I1IiiI = O000oo ( 'thumbnail' ) [ 0 ] . string
    if I1IiiI == None :
     I1IiiI = ''
     if 44 - 44: IIiI1I11i11 . O0O / o0OOO + O00oOoOoO0o0O
    try :
     if not O000oo ( 'fanart' ) :
      if i11 . getSetting ( 'use_thumb' ) == "true" :
       o0o = I1IiiI
      else :
       o0o = fanart
     else :
      o0o = O000oo ( 'fanart' ) [ 0 ] . string
     if o0o == None :
      raise
    except :
     o0o = fanart
     if 73 - 73: Oo0ooO0oo0oO * o0OOO + oOooOoO0Oo0O . II
    try :
     OoOo = O000oo ( 'info' ) [ 0 ] . string
     if OoOo == None :
      raise
    except :
     OoOo = ''
     if 70 - 70: I1i1iI1i - IIiI1I11i11 / O00oOoOoO0o0O
    try :
     o00O = O000oo ( 'genre' ) [ 0 ] . string
     if o00O == None :
      raise
    except :
     o00O = ''
     if 82 - 82: iii1I1I % IiIi11iIIi1Ii % O0O - IIiI1I11i11 + OoooooooOO
    try :
     iI = O000oo ( 'date' ) [ 0 ] . string
     if iI == None :
      raise
    except :
     iI = ''
     if 22 - 22: i1IIi + O0 . iIii1I11I1II1 * O0oo0OO0 % i11iIiiIii * oOooOoO0Oo0O
    try :
     credits = O000oo ( 'credits' ) [ 0 ] . string
     if credits == None :
      raise
    except :
     credits = ''
     if 77 - 77: IIiI1I11i11
    try :
     if III1IiiI == '' :
      oo0oooooO0 ( O00O0oOO00O00 . encode ( 'utf-8' , 'ignore' ) , url . encode ( 'utf-8' ) , 2 , I1IiiI , o0o , OoOo , o00O , iI , credits , True )
     else :
      oo0oooooO0 ( O00O0oOO00O00 . encode ( 'utf-8' ) , III1IiiI . encode ( 'utf-8' ) , 1 , I1IiiI , o0o , OoOo , o00O , iI , None , 'source' )
    except :
     OO ( 'There was a problem adding directory from getData(): ' + O00O0oOO00O00 . encode ( 'utf-8' , 'ignore' ) )
  else :
   OO ( 'No Channels: getItems' )
   I1iII1iIi1I ( ooo0O ( 'item' ) , fanart )
 else :
  oO0O00OoOO0 ( ooo0O )
  if 82 - 82: i11i . Oo0ooO0oo0oO - iIii1I11I1II1 - Oo0ooO0oo0oO * i11i
 if iii == "Thumbnail" :
  ooO0oOOooOo0 ( )
  if 38 - 38: I1i1iI1i
def oO0O00OoOO0 ( data ) :
 Ooo00o0Oooo = data . rstrip ( )
 Oo0O00Oo0o0 = re . compile ( r'#EXTINF:(.+?),(.*?)[\n\r]+([^\n]+)' ) . findall ( Ooo00o0Oooo )
 OOooooO0Oo = len ( Oo0O00Oo0o0 )
 print 'total m3u links' , OOooooO0Oo
 for OOiIiIIi1 , I1IIII1i , I1I11i in Oo0O00Oo0o0 :
  if 'tvg-logo' in OOiIiIIi1 :
   I1IiiI = Ii1I1I1i1Ii ( OOiIiIIi1 , 'tvg-logo=[\'"](.*?)[\'"]' )
   if I1IiiI :
    if I1IiiI . startswith ( 'http' ) :
     I1IiiI = I1IiiI
     if 5 - 5: I1i1iI1i . IiIi11iIIi1Ii
    elif not i11 . getSetting ( 'logo-folderPath' ) == "" :
     O0oO0 = i11 . getSetting ( 'logo-folderPath' )
     I1IiiI = O0oO0 + I1IiiI
     if 87 - 87: IIiI1I11i11 . Oo0ooO0oo0oO
    else :
     I1IiiI = I1IiiI
     if 75 - 75: II + oo000 + IiIi11iIIi1Ii * iii1I1I % iiiiIi11i . O0oo0OO0
  else :
   I1IiiI = ''
  if 'type' in OOiIiIIi1 :
   oO = Ii1I1I1i1Ii ( OOiIiIIi1 , 'type=[\'"](.*?)[\'"]' )
   if oO == 'yt-dl' :
    I1I11i = I1I11i + "&mode=18"
   elif oO == 'regex' :
    ii1ii11IIIiiI = I1I11i . split ( '&regexs=' )
    I1Ii1I1 = IiII111iI1ii1 ( iI1Ii11iII1 ( '' , data = ii1ii11IIIiiI [ 1 ] ) )
    if 37 - 37: iiiiIi11i - I1i1iI1i % IIiI1I11i11
    i1i ( ii1ii11IIIiiI [ 0 ] , I1IIII1i , I1IiiI , '' , '' , '' , '' , '' , None , I1Ii1I1 , OOooooO0Oo )
    continue
  i1i ( I1I11i , I1IIII1i , I1IiiI , '' , '' , '' , '' , '' , None , '' , OOooooO0Oo )
  if 77 - 77: IIiI1I11i11 - i1IIi - iii1I1I . oo000
 xbmc . executebuiltin ( "Container.SetViewMode(50)" )
 if 39 - 39: i11i / II + I1i1iI1i / oo000
def I1Ii11i ( name , url , fanart ) :
 ooo0O = iI1Ii11iII1 ( url )
 i1111I1I = ooo0O . find ( 'channel' , attrs = { 'name' : name . decode ( 'utf-8' ) } )
 i1ioOOoo00O00o = i1111I1I ( 'item' )
 try :
  o0o = i1111I1I ( 'fanart' ) [ 0 ] . string
  if o0o == None :
   raise
 except :
  o0o = fanart
 for O000oo in i1111I1I ( 'subchannel' ) :
  name = O000oo ( 'name' ) [ 0 ] . string
  try :
   I1IiiI = O000oo ( 'thumbnail' ) [ 0 ] . string
   if I1IiiI == None :
    raise
  except :
   I1IiiI = ''
  try :
   if not O000oo ( 'fanart' ) :
    if i11 . getSetting ( 'use_thumb' ) == "true" :
     o0o = I1IiiI
   else :
    o0o = O000oo ( 'fanart' ) [ 0 ] . string
   if o0o == None :
    raise
  except :
   pass
  try :
   OoOo = O000oo ( 'info' ) [ 0 ] . string
   if OoOo == None :
    raise
  except :
   OoOo = ''
   if 98 - 98: Ii1I + Oo0ooO0oo0oO + iiiiIi11i % OoooooooOO
  try :
   o00O = O000oo ( 'genre' ) [ 0 ] . string
   if o00O == None :
    raise
  except :
   o00O = ''
   if 97 - 97: O0 * OoooooooOO . OoooooooOO
  try :
   iI = O000oo ( 'date' ) [ 0 ] . string
   if iI == None :
    raise
  except :
   iI = ''
   if 33 - 33: I1i1iI1i + O0oo0OO0 * iiiiIi11i / iIii1I11I1II1 - oOooOoO0Oo0O
  try :
   credits = O000oo ( 'credits' ) [ 0 ] . string
   if credits == None :
    raise
  except :
   credits = ''
   if 54 - 54: I1i1iI1i / Ii1I . iiiiIi11i % O0oo0OO0
  try :
   oo0oooooO0 ( name . encode ( 'utf-8' , 'ignore' ) , url . encode ( 'utf-8' ) , 3 , I1IiiI , o0o , OoOo , o00O , credits , iI )
  except :
   OO ( 'There was a problem adding directory - ' + name . encode ( 'utf-8' , 'ignore' ) )
 I1iII1iIi1I ( i1ioOOoo00O00o , o0o )
 if 57 - 57: i11iIiiIii . o0OOO - O00oOoOoO0o0O - iiiiIi11i + oo000
 if 63 - 63: oo000 * O0oo0OO0
def ooiIi1 ( name , url , fanart ) :
 ooo0O = iI1Ii11iII1 ( url )
 i1111I1I = ooo0O . find ( 'subchannel' , attrs = { 'name' : name . decode ( 'utf-8' ) } )
 i1ioOOoo00O00o = i1111I1I ( 'subitem' )
 I1iII1iIi1I ( i1ioOOoo00O00o , fanart )
 if 74 - 74: iIii1I11I1II1 * o0OOO + oo000 / i1IIi / i11i . IIiI1I11i11
def oooOo0OOOoo0 ( name , url , iconimage , fanart ) :
 OOoO = [ ] ; OO0O000 = [ ] ; iiIiI1i1 = 0
 oO0O00oOOoooO = IiIi11iI ( url , 'sublink:' , '#' )
 for Oo0O00O000 in oO0O00oOOoooO :
  if 'LISTSOURCE:' in Oo0O00O000 :
   i11I1IiII1i1i = ooI1111i ( Oo0O00O000 , 'LISTSOURCE:' , '::' )
   iIIii = ooI1111i ( Oo0O00O000 , 'LISTNAME:' , '::' )
  else :
   i11I1IiII1i1i = Oo0O00O000 . replace ( 'sublink:' , '' ) . replace ( '#' , '' )
   iIIii = name
  if len ( i11I1IiII1i1i ) > 10 :
   iiIiI1i1 = iiIiI1i1 + 1 ; OOoO . append ( iIIii ) ; OO0O000 . append ( i11I1IiII1i1i )
   if 92 - 92: O00oOoOoO0o0O + iiiiIi11i % Ii1I
 if iiIiI1i1 == 1 :
  try :
   oOo0 = xbmcgui . ListItem ( name , iconImage = iconimage , thumbnailImage = iconimage ) ; oOo0 . setInfo ( type = "Video" , infoLabels = { "Title" : name } )
   i1iI = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = OO0O000 [ 0 ] , listitem = oOo0 )
   xbmc . Player ( ) . play ( Oo0O0 ( OO0O000 [ 0 ] ) , oOo0 )
  except :
   pass
 else :
  o0OO00 = xbmcgui . Dialog ( )
  Ooo0OOoOoO0 = o0OO00 . select ( 'Pauls World - Select A Source' , OOoO )
  if Ooo0OOoOoO0 >= 0 :
   oOo0OOoO0 = str ( OOoO [ Ooo0OOoOoO0 ] )
   IIo0Oo0oO0oOO00 = str ( OO0O000 [ Ooo0OOoOoO0 ] )
   try :
    oOo0 = xbmcgui . ListItem ( oOo0OOoO0 , iconImage = iconimage , thumbnailImage = iconimage ) ; oOo0 . setInfo ( type = "Video" , infoLabels = { "Title" : oOo0OOoO0 } )
    i1iI = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = IIo0Oo0oO0oOO00 , listitem = oOo0 )
    xbmc . Player ( ) . play ( Oo0O0 ( IIo0Oo0oO0oOO00 ) , oOo0 )
   except :
    pass
    if 92 - 92: OoooooooOO * I1i1iI1i
    if 100 - 100: I1i1iI1i + I1i1iI1i * Oo0ooO0oo0oO
    if 1 - 1: II . II / oo000 - I1i1iI1i
def oooO ( text , pattern ) :
 i1I1i111Ii = ""
 try :
  ooo = re . findall ( pattern , text , flags = re . DOTALL )
  i1I1i111Ii = ooo [ 0 ]
 except :
  i1I1i111Ii = ""
  if 27 - 27: II % oOooOoO0Oo0O
 return i1I1i111Ii
 if 73 - 73: Ii1I
def IiIi11iI ( text , start_with , end_with ) :
 ooO = re . findall ( "(?i)(" + start_with + "[\S\s]+?" + end_with + ")" , text )
 return ooO
 if 51 - 51: oOooOoO0Oo0O % I1i1iI1i . iiiiIi11i / iIii1I11I1II1 / iii1I1I . iiiiIi11i
def ooI1111i ( text , from_string , to_string , excluding = True ) :
 if excluding :
  try : ooO = re . search ( "(?i)" + from_string + "([\S\s]+?)" + to_string , text ) . group ( 1 )
  except : ooO = ''
 else :
  try : ooO = re . search ( "(?i)(" + from_string + "[\S\s]+?" + to_string + ")" , text ) . group ( 1 )
  except : ooO = ''
 return ooO
 if 42 - 42: IiIi11iIIi1Ii + i1IIi - O00oOoOoO0o0O / Oo0ooO0oo0oO
def I1iII1iIi1I ( items , fanart ) :
 OOooooO0Oo = len ( items )
 print 'START GET ITEMS *****'
 OO ( 'Total Items: %s' % OOooooO0Oo )
 for iiIiIIIiiI in items :
  iiI1IIIi = False
  II11IiIi11 = False
  try :
   O00O0oOO00O00 = iiIiIIIiiI ( 'title' ) [ 0 ] . string
   if O00O0oOO00O00 is None :
    O00O0oOO00O00 = 'unknown?'
  except :
   OO ( 'Name Error' )
   O00O0oOO00O00 = ''
   if 7 - 7: O0O . O00oOoOoO0o0O % iiiiIi11i * II + Oo0ooO0oo0oO + I1i1iI1i
   if 38 - 38: IiIi11iIIi1Ii - oOooOoO0Oo0O - IiIi11iIIi1Ii / iii1I1I - i1IIi
  try :
   if iiIiIIIiiI ( 'epg' ) :
    if iiIiIIIiiI . epg_url :
     OO ( 'Get EPG Regex' )
     i1II1 = iiIiIIIiiI . epg_url . string
     i11i1 = iiIiIIIiiI . epg_regex . string
     IiiiiI1i1Iii = oo00oO0o ( i1II1 , i11i1 )
     if IiiiiI1i1Iii :
      O00O0oOO00O00 += ' - ' + IiiiiI1i1Iii
    elif iiIiIIIiiI ( 'epg' ) [ 0 ] . string > 1 :
     O00O0oOO00O00 += iiii111II ( iiIiIIIiiI ( 'epg' ) [ 0 ] . string )
   else :
    pass
  except :
   OO ( 'EPG Error' )
  try :
   ii1ii11IIIiiI = [ ]
   if len ( iiIiIIIiiI ( 'link' ) ) > 0 :
    for Oo0O0OOOoo in iiIiIIIiiI ( 'link' ) :
     if not Oo0O0OOOoo . string == None :
      ii1ii11IIIiiI . append ( Oo0O0OOOoo . string )
      if 50 - 50: Ii1I * oOooOoO0Oo0O % iIii1I11I1II1 + O00oOoOoO0o0O + O0oo0OO0 + oOooOoO0Oo0O
   elif len ( iiIiIIIiiI ( 'sportsdevil' ) ) > 0 :
    for Oo0O0OOOoo in iiIiIIIiiI ( 'sportsdevil' ) :
     if not Oo0O0OOOoo . string == None :
      OO0OoooO00o0 = 'plugin://plugin.video.SportsDevil/?mode=1&amp;item=catcher%3dstreams%26url=' + Oo0O0OOOoo . string
      iI1i11II1i = iiIiIIIiiI ( 'referer' ) [ 0 ] . string
      if iI1i11II1i :
       OO0OoooO00o0 = OO0OoooO00o0 + '%26referer=' + iI1i11II1i
      ii1ii11IIIiiI . append ( OO0OoooO00o0 )
   elif len ( iiIiIIIiiI ( 'p2p' ) ) > 0 :
    for Oo0O0OOOoo in iiIiIIIiiI ( 'p2p' ) :
     if not Oo0O0OOOoo . string == None :
      if 'sop://' in Oo0O0OOOoo :
       o0o0OoOo0O0OO = 'plugin://plugin.video.p2p-streams/?url=' + Oo0O0OOOoo . string + '&amp;mode=2&amp;' + 'name=' + O00O0oOO00O00
       ii1ii11IIIiiI . append ( o0o0OoOo0O0OO )
      else :
       iIi1I11I = 'plugin://plugin.video.p2p-streams/?url=' + Oo0O0OOOoo . string + '&amp;mode=1&amp;' + 'name=' + O00O0oOO00O00
       ii1ii11IIIiiI . append ( iIi1I11I )
   elif len ( iiIiIIIiiI ( 'vaughn' ) ) > 0 :
    for Oo0O0OOOoo in iiIiIIIiiI ( 'vaughn' ) :
     if not Oo0O0OOOoo . string == None :
      Iii1 = 'plugin://plugin.stream.vaughnlive.tv/?mode=PlayLiveStream&amp;channel=' + Oo0O0OOOoo . string
      ii1ii11IIIiiI . append ( Iii1 )
   elif len ( iiIiIIIiiI ( 'ilive' ) ) > 0 :
    for Oo0O0OOOoo in iiIiIIIiiI ( 'ilive' ) :
     if not Oo0O0OOOoo . string == None :
      if not 'http' in Oo0O0OOOoo . string :
       ooOo0o00OOo0 = 'plugin://plugin.video.tbh.ilive/?url=http://www.streamlive.to/view/' + Oo0O0OOOoo . string + '&amp;link=99&amp;mode=iLivePlay'
      else :
       ooOo0o00OOo0 = 'plugin://plugin.video.tbh.ilive/?url=' + Oo0O0OOOoo . string + '&amp;link=99&amp;mode=iLivePlay'
   elif len ( iiIiIIIiiI ( 'yt-dl' ) ) > 0 :
    for Oo0O0OOOoo in iiIiIIIiiI ( 'yt-dl' ) :
     if not Oo0O0OOOoo . string == None :
      I1IIii1 = Oo0O0OOOoo . string + '&mode=18'
      ii1ii11IIIiiI . append ( I1IIii1 )
   elif len ( iiIiIIIiiI ( 'utube' ) ) > 0 :
    for Oo0O0OOOoo in iiIiIIIiiI ( 'utube' ) :
     if not Oo0O0OOOoo . string == None :
      if len ( Oo0O0OOOoo . string ) == 11 :
       OO0o0oOOO0O = 'plugin://plugin.video.youtube/play/?video_id=' + Oo0O0OOOoo . string
      elif Oo0O0OOOoo . string . startswith ( 'PL' ) and not '&order=' in Oo0O0OOOoo . string :
       OO0o0oOOO0O = 'plugin://plugin.video.youtube/play/?&order=default&playlist_id=' + Oo0O0OOOoo . string
      else :
       OO0o0oOOO0O = 'plugin://plugin.video.youtube/play/?playlist_id=' + Oo0O0OOOoo . string
    ii1ii11IIIiiI . append ( OO0o0oOOO0O )
   elif len ( iiIiIIIiiI ( 'imdb' ) ) > 0 :
    for Oo0O0OOOoo in iiIiIIIiiI ( 'imdb' ) :
     if not Oo0O0OOOoo . string == None :
      if i11 . getSetting ( 'genesisorpulsar' ) == '0' :
       iII1i11 = 'plugin://plugin.video.genesis/?action=play&imdb=' + Oo0O0OOOoo . string
      else :
       iII1i11 = 'plugin://plugin.video.pulsar/movie/tt' + Oo0O0OOOoo . string + '/play'
      ii1ii11IIIiiI . append ( iII1i11 )
   elif len ( iiIiIIIiiI ( 'f4m' ) ) > 0 :
    for Oo0O0OOOoo in iiIiIIIiiI ( 'f4m' ) :
     if not Oo0O0OOOoo . string == None :
      if '.f4m' in Oo0O0OOOoo . string :
       OooIiIIII1i11I = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( Oo0O0OOOoo . string )
      elif '.m3u8' in Oo0O0OOOoo . string :
       OooIiIIII1i11I = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( Oo0O0OOOoo . string ) + '&amp;streamtype=HLS'
       if 86 - 86: IIiI1I11i11 . O0 - OoooooooOO . O0O + O00oOoOoO0o0O
      else :
       OooIiIIII1i11I = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( Oo0O0OOOoo . string ) + '&amp;streamtype=SIMPLE'
    ii1ii11IIIiiI . append ( OooIiIIII1i11I )
   elif len ( iiIiIIIiiI ( 'ftv' ) ) > 0 :
    for Oo0O0OOOoo in iiIiIIIiiI ( 'ftv' ) :
     if not Oo0O0OOOoo . string == None :
      OOo = 'plugin://plugin.video.F.T.V/?name=' + urllib . quote ( O00O0oOO00O00 ) + '&url=' + Oo0O0OOOoo . string + '&mode=125&ch_fanart=na'
     ii1ii11IIIiiI . append ( OOo )
   if len ( ii1ii11IIIiiI ) < 1 :
    raise
  except :
   OO ( 'Error <link> element, Passing:' + O00O0oOO00O00 . encode ( 'utf-8' , 'ignore' ) )
   continue
   if 22 - 22: oo000 * O0 . Oo0ooO0oo0oO * i11iIiiIii - oOooOoO0Oo0O * II
  iiI1IIIi = False
  if 59 - 59: IIiI1I11i11 % OoooooooOO . O0oo0OO0 / Oo0ooO0oo0oO + oOooOoO0Oo0O
  try :
   iiI1IIIi = iiIiIIIiiI ( 'externallink' ) [ 0 ] . string
  except : pass
  if 76 - 76: II
  if iiI1IIIi :
   OoO0O00O0oo0O = [ iiI1IIIi ]
   iiI1IIIi = True
  else :
   iiI1IIIi = False
  try :
   II11IiIi11 = iiIiIIIiiI ( 'jsonrpc' ) [ 0 ] . string
  except : pass
  if II11IiIi11 :
   OoO0O00O0oo0O = [ II11IiIi11 ]
   II11IiIi11 = True
  else :
   II11IiIi11 = False
  try :
   I1IiiI = iiIiIIIiiI ( 'thumbnail' ) [ 0 ] . string
   if I1IiiI == None :
    raise
  except :
   I1IiiI = ''
  try :
   if not iiIiIIIiiI ( 'fanart' ) :
    if i11 . getSetting ( 'use_thumb' ) == "true" :
     o0o = I1IiiI
    else :
     o0o = fanart
   else :
    o0o = iiIiIIIiiI ( 'fanart' ) [ 0 ] . string
   if o0o == None :
    raise
  except :
   o0o = fanart
  try :
   OoOo = iiIiIIIiiI ( 'info' ) [ 0 ] . string
   if OoOo == None :
    raise
  except :
   OoOo = ''
   if 36 - 36: Ii1I + O0 - O00oOoOoO0o0O - O0 % iii1I1I . iiiiIi11i
  try :
   o00O = iiIiIIIiiI ( 'genre' ) [ 0 ] . string
   if o00O == None :
    raise
  except :
   o00O = ''
   if 74 - 74: i11iIiiIii . oOooOoO0Oo0O
  try :
   iI = iiIiIIIiiI ( 'date' ) [ 0 ] . string
   if iI == None :
    raise
  except :
   iI = ''
   if 36 - 36: OoooooooOO . O0O
  I1Ii1I1 = None
  if iiIiIIIiiI ( 'regex' ) :
   try :
    oOIIiIi = iiIiIIIiiI ( 'regex' )
    I1Ii1I1 = IiII111iI1ii1 ( oOIIiIi )
   except :
    pass
    if 91 - 91: o0OOO * IIiI1I11i11 / oOooOoO0Oo0O . O0 + O0O + oo000
  try :
   if len ( ii1ii11IIIiiI ) > 1 :
    if 8 - 8: iiiiIi11i / o0OOO
    i1iI1 = 0
    i11ii1ii11i = [ ]
    for Oo0O0OOOoo in ii1ii11IIIiiI :
     if i11 . getSetting ( 'ask_playlist_items' ) == 'true' :
      if I1Ii1I1 :
       i11ii1ii11i . append ( Oo0O0OOOoo + '&regexs=' + I1Ii1I1 )
      elif any ( x in Oo0O0OOOoo for x in IiiIII111iI ) and Oo0O0OOOoo . startswith ( 'http' ) :
       i11ii1ii11i . append ( Oo0O0OOOoo + '&mode=19' )
     else :
      i11ii1ii11i . append ( Oo0O0OOOoo )
    if i11 . getSetting ( 'add_playlist' ) == "false" :
     for Oo0O0OOOoo in ii1ii11IIIiiI :
      i1iI1 += 1
      print 'ADDLINK 1'
      i1i ( Oo0O0OOOoo , '%s) %s' % ( i1iI1 , O00O0oOO00O00 . encode ( 'utf-8' , 'ignore' ) ) , I1IiiI , o0o , OoOo , o00O , iI , True , i11ii1ii11i , I1Ii1I1 , OOooooO0Oo )
    else :
     i1i ( '' , O00O0oOO00O00 . encode ( 'utf-8' , 'ignore' ) , I1IiiI , o0o , OoOo , o00O , iI , True , i11ii1ii11i , I1Ii1I1 , OOooooO0Oo )
   else :
    if iiI1IIIi :
     oo0oooooO0 ( O00O0oOO00O00 . encode ( 'utf-8' ) , OoO0O00O0oo0O [ 0 ] . encode ( 'utf-8' ) , 1 , I1IiiI , fanart , OoOo , o00O , iI , None , 'source' )
    elif II11IiIi11 :
     oo0oooooO0 ( O00O0oOO00O00 . encode ( 'utf-8' ) , OoO0O00O0oo0O [ 0 ] , 53 , I1IiiI , fanart , OoOo , o00O , iI , None , 'source' )
    elif ii1ii11IIIiiI [ 0 ] . find ( 'sublink' ) > 0 :
     oo0oooooO0 ( O00O0oOO00O00 . encode ( 'utf-8' ) , ii1ii11IIIiiI [ 0 ] , 30 , I1IiiI , o0o , OoOo , I1Ii1I1 , '' , '' , '' )
    else :
     i1i ( ii1ii11IIIiiI [ 0 ] , O00O0oOO00O00 . encode ( 'utf-8' , 'ignore' ) , I1IiiI , o0o , OoOo , o00O , iI , True , None , I1Ii1I1 , OOooooO0Oo )
     if 70 - 70: i1IIi - O0oo0OO0 + IIiI1I11i11
  except :
   OO ( 'There was a problem adding item - ' + O00O0oOO00O00 . encode ( 'utf-8' , 'ignore' ) )
 print 'FINISH GET ITEMS *****'
 if 12 - 12: IiIi11iIIi1Ii - o0OOO % oo000 * iii1I1I
def IiII111iI1ii1 ( reg_item ) :
 try :
  I1Ii1I1 = { }
  for Oo0O0OOOoo in reg_item :
   I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] = { }
   try :
    I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'expre' ] = Oo0O0OOOoo ( 'expres' ) [ 0 ] . string
    if not I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'expre' ] :
     I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'expre' ] = ''
   except :
    OO ( "Regex: -- No Referer --" )
   I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'page' ] = Oo0O0OOOoo ( 'page' ) [ 0 ] . string
   try :
    I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'refer' ] = Oo0O0OOOoo ( 'referer' ) [ 0 ] . string
   except :
    OO ( "Regex: -- No Referer --" )
   try :
    I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'connection' ] = Oo0O0OOOoo ( 'connection' ) [ 0 ] . string
   except :
    OO ( "Regex: -- No connection --" )
    if 44 - 44: O0oo0OO0 % O00oOoOoO0o0O
   try :
    I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'notplayable' ] = Oo0O0OOOoo ( 'notplayable' ) [ 0 ] . string
   except :
    OO ( "Regex: -- No notplayable --" )
    if 41 - 41: i1IIi - iii1I1I - O00oOoOoO0o0O
   try :
    I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'noredirect' ] = Oo0O0OOOoo ( 'noredirect' ) [ 0 ] . string
   except :
    OO ( "Regex: -- No noredirect --" )
   try :
    I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'origin' ] = Oo0O0OOOoo ( 'origin' ) [ 0 ] . string
   except :
    OO ( "Regex: -- No origin --" )
   try :
    I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'includeheaders' ] = Oo0O0OOOoo ( 'includeheaders' ) [ 0 ] . string
   except :
    OO ( "Regex: -- No includeheaders --" )
    if 8 - 8: O0O + I1i1iI1i - IiIi11iIIi1Ii % IIiI1I11i11 % IiIi11iIIi1Ii * iiiiIi11i
   try :
    I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'x-req' ] = Oo0O0OOOoo ( 'x-req' ) [ 0 ] . string
   except :
    OO ( "Regex: -- No x-req --" )
   try :
    I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'x-forward' ] = Oo0O0OOOoo ( 'x-forward' ) [ 0 ] . string
   except :
    OO ( "Regex: -- No x-forward --" )
    if 9 - 9: IIiI1I11i11 - i11iIiiIii - Ii1I * O00oOoOoO0o0O + II
   try :
    I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'agent' ] = Oo0O0OOOoo ( 'agent' ) [ 0 ] . string
   except :
    OO ( "Regex: -- No User Agent --" )
   try :
    I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'post' ] = Oo0O0OOOoo ( 'post' ) [ 0 ] . string
   except :
    OO ( "Regex: -- Not a post" )
   try :
    I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'rawpost' ] = Oo0O0OOOoo ( 'rawpost' ) [ 0 ] . string
   except :
    OO ( "Regex: -- Not a rawpost" )
   try :
    I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'htmlunescape' ] = Oo0O0OOOoo ( 'htmlunescape' ) [ 0 ] . string
   except :
    OO ( "Regex: -- Not a htmlunescape" )
    if 44 - 44: i11i
    if 52 - 52: o0OOO - IIiI1I11i11 + o0OOO % IiIi11iIIi1Ii
   try :
    I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'readcookieonly' ] = Oo0O0OOOoo ( 'readcookieonly' ) [ 0 ] . string
   except :
    OO ( "Regex: -- Not a readCookieOnly" )
   try :
    I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] = Oo0O0OOOoo ( 'cookiejar' ) [ 0 ] . string
    if not I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] :
     I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] = ''
   except :
    OO ( "Regex: -- Not a cookieJar" )
   try :
    I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'setcookie' ] = Oo0O0OOOoo ( 'setcookie' ) [ 0 ] . string
   except :
    OO ( "Regex: -- Not a setcookie" )
   try :
    I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'appendcookie' ] = Oo0O0OOOoo ( 'appendcookie' ) [ 0 ] . string
   except :
    OO ( "Regex: -- Not a appendcookie" )
    if 35 - 35: iIii1I11I1II1
   try :
    I1Ii1I1 [ Oo0O0OOOoo ( 'name' ) [ 0 ] . string ] [ 'ignorecache' ] = Oo0O0OOOoo ( 'ignorecache' ) [ 0 ] . string
   except :
    OO ( "Regex: -- no ignorecache" )
    if 42 - 42: I1i1iI1i . oOooOoO0Oo0O . i1IIi + oo000 + Ii1I + oOooOoO0Oo0O
  I1Ii1I1 = urllib . quote ( repr ( I1Ii1I1 ) )
  return I1Ii1I1
  if 31 - 31: O0oo0OO0 . Ii1I - II . OoooooooOO / OoooooooOO
 except :
  I1Ii1I1 = None
  OO ( 'regex Error: ' + O00O0oOO00O00 . encode ( 'utf-8' , 'ignore' ) )
  if 56 - 56: O0O / iiiiIi11i / i11iIiiIii + OoooooooOO - IIiI1I11i11 - iii1I1I
def Iii1iiIi1II ( url ) :
 try :
  for Oo0O0OOOoo in range ( 1 , 51 ) :
   i1I1i111Ii = OO0O00oOo ( url )
   if "EXT-X-STREAM-INF" in i1I1i111Ii : return url
   if not "EXTM3U" in i1I1i111Ii : return
   xbmc . sleep ( 2000 )
  return
 except :
  return
  if 14 - 14: oOooOoO0Oo0O
  if 19 - 19: O0O - IIiI1I11i11 . iiiiIi11i / iiiiIi11i % II
def ooOii ( regexs , url , cookieJar = None , forCookieJarOnly = False , recursiveCall = False , cachedPages = { } , rawPost = False , cookie_jar_file = None ) :
 if not recursiveCall :
  regexs = eval ( urllib . unquote ( regexs ) )
 OO0O0Ooo = re . compile ( '\$doregex\[([^\]]*)\]' ) . findall ( url )
 oOoO0 = True
 if 77 - 77: iIii1I11I1II1 . O0oo0OO0 % O0oo0OO0 + i11iIiiIii
 for Oo00o0OO0O00o in OO0O0Ooo :
  if Oo00o0OO0O00o in regexs :
   O0Oooo = regexs [ Oo00o0OO0O00o ]
   iiIi1i = False
   if 27 - 27: Ii1I * II . I1i1iI1i % Oo0ooO0oo0oO * Oo0ooO0oo0oO . i1IIi
   if 72 - 72: Ii1I % o0OOO + O0O / iiiiIi11i + Oo0ooO0oo0oO
   if 'cookiejar' in O0Oooo :
    iiIi1i = O0Oooo [ 'cookiejar' ]
    if '$doregex' in iiIi1i :
     cookieJar = ooOii ( regexs , O0Oooo [ 'cookiejar' ] , cookieJar , True , True , cachedPages )
     iiIi1i = True
    else :
     iiIi1i = True
   if iiIi1i :
    if cookieJar == None :
     cookie_jar_file = None
     if 'open[' in O0Oooo [ 'cookiejar' ] :
      cookie_jar_file = O0Oooo [ 'cookiejar' ] . split ( 'open[' ) [ 1 ] . split ( ']' ) [ 0 ]
      if 10 - 10: I1i1iI1i / II + i11iIiiIii / O00oOoOoO0o0O
     cookieJar = OOOoOoO ( cookie_jar_file )
     if cookie_jar_file :
      iIIIII1ii1I ( cookieJar , cookie_jar_file )
    elif 'save[' in O0Oooo [ 'cookiejar' ] :
     cookie_jar_file = O0Oooo [ 'cookiejar' ] . split ( 'save[' ) [ 1 ] . split ( ']' ) [ 0 ]
     Ii1i1iI = os . path . join ( Oo0o0000o0o0 , cookie_jar_file )
     print 'complete_path' , Ii1i1iI
     iIIIII1ii1I ( cookieJar , cookie_jar_file )
     if 16 - 16: Ii1I / IIiI1I11i11 / OoooooooOO * oOooOoO0Oo0O + i1IIi % Ii1I
     if 71 - 71: oo000
   if O0Oooo [ 'page' ] and '$doregex' in O0Oooo [ 'page' ] :
    O0Oooo [ 'page' ] = ooOii ( regexs , O0Oooo [ 'page' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 14 - 14: i11iIiiIii % Ii1I
   if 'setcookie' in O0Oooo and O0Oooo [ 'setcookie' ] and '$doregex' in O0Oooo [ 'setcookie' ] :
    O0Oooo [ 'setcookie' ] = ooOii ( regexs , O0Oooo [ 'setcookie' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
   if 'appendcookie' in O0Oooo and O0Oooo [ 'appendcookie' ] and '$doregex' in O0Oooo [ 'appendcookie' ] :
    O0Oooo [ 'appendcookie' ] = ooOii ( regexs , O0Oooo [ 'appendcookie' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 82 - 82: iIii1I11I1II1 + IIiI1I11i11 . iIii1I11I1II1 % Oo0ooO0oo0oO / O00oOoOoO0o0O . O00oOoOoO0o0O
    if 14 - 14: IiIi11iIIi1Ii . Ii1I . iii1I1I + OoooooooOO - Ii1I + Oo0ooO0oo0oO
   if 'post' in O0Oooo and '$doregex' in O0Oooo [ 'post' ] :
    O0Oooo [ 'post' ] = ooOii ( regexs , O0Oooo [ 'post' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    print 'post is now' , O0Oooo [ 'post' ]
    if 9 - 9: O00oOoOoO0o0O
   if 'rawpost' in O0Oooo and '$doregex' in O0Oooo [ 'rawpost' ] :
    O0Oooo [ 'rawpost' ] = ooOii ( regexs , O0Oooo [ 'rawpost' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages , rawPost = True )
    if 59 - 59: oOooOoO0Oo0O * i11i . O0
   if 'rawpost' in O0Oooo and '$epoctime$' in O0Oooo [ 'rawpost' ] :
    O0Oooo [ 'rawpost' ] = O0Oooo [ 'rawpost' ] . replace ( '$epoctime$' , O000OoOO0 ( ) )
    if 30 - 30: Oo0ooO0oo0oO
   if 'rawpost' in O0Oooo and '$epoctime2$' in O0Oooo [ 'rawpost' ] :
    O0Oooo [ 'rawpost' ] = O0Oooo [ 'rawpost' ] . replace ( '$epoctime2$' , oOO ( ) )
    if 53 - 53: I1i1iI1i * Oo0ooO0oo0oO . IIiI1I11i11 - O00oOoOoO0o0O % O00oOoOoO0o0O * i11iIiiIii
    if 7 - 7: O0 . O00oOoOoO0o0O
   ii11i1iIII = ''
   if O0Oooo [ 'page' ] and O0Oooo [ 'page' ] in cachedPages and not 'ignorecache' in O0Oooo and forCookieJarOnly == False :
    ii11i1iIII = cachedPages [ O0Oooo [ 'page' ] ]
   else :
    if O0Oooo [ 'page' ] and not O0Oooo [ 'page' ] == '' and O0Oooo [ 'page' ] . startswith ( 'http' ) :
     if '$epoctime$' in O0Oooo [ 'page' ] :
      O0Oooo [ 'page' ] = O0Oooo [ 'page' ] . replace ( '$epoctime$' , O000OoOO0 ( ) )
     if '$epoctime2$' in O0Oooo [ 'page' ] :
      O0Oooo [ 'page' ] = O0Oooo [ 'page' ] . replace ( '$epoctime2$' , oOO ( ) )
      if 51 - 51: O0O - O0 % iiiiIi11i - i11i
     I1II = O0Oooo [ 'page' ] . split ( '|' )
     Oo000ooOOO = I1II [ 0 ]
     Ii11i1I11i = None
     if len ( I1II ) > 1 :
      Ii11i1I11i = I1II [ 1 ]
     oOo = urllib2 . Request ( Oo000ooOOO )
     oOo . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1' )
     if 'refer' in O0Oooo :
      oOo . add_header ( 'Referer' , O0Oooo [ 'refer' ] )
     if 'agent' in O0Oooo :
      oOo . add_header ( 'User-agent' , O0Oooo [ 'agent' ] )
     if 'x-req' in O0Oooo :
      oOo . add_header ( 'X-Requested-With' , O0Oooo [ 'x-req' ] )
     if 'x-forward' in O0Oooo :
      oOo . add_header ( 'X-Forwarded-For' , O0Oooo [ 'x-forward' ] )
     if 'setcookie' in O0Oooo :
      print 'adding cookie' , O0Oooo [ 'setcookie' ]
      oOo . add_header ( 'Cookie' , O0Oooo [ 'setcookie' ] )
     if 'appendcookie' in O0Oooo :
      print 'appending cookie to cookiejar' , O0Oooo [ 'appendcookie' ]
      I11i1 = O0Oooo [ 'appendcookie' ]
      I11i1 = I11i1 . split ( ';' )
      for iIiIIIIIii in I11i1 :
       OOo0 , ii11I1 = iIiIIIIIii . split ( '=' )
       oO0oo , OOo0 = OOo0 . split ( ':' )
       Ii111iIi1iIi = cookielib . Cookie ( version = 0 , name = OOo0 , value = ii11I1 , port = None , port_specified = False , domain = oO0oo , domain_specified = False , domain_initial_dot = False , path = '/' , path_specified = True , secure = False , expires = None , discard = True , comment = None , comment_url = None , rest = { 'HttpOnly' : None } , rfc2109 = False )
       cookieJar . set_cookie ( Ii111iIi1iIi )
       if 21 - 21: iiiiIi11i / o0OOO + O00oOoOoO0o0O + OoooooooOO
       if 91 - 91: i11iIiiIii / i1IIi + O0oo0OO0 + II * i11iIiiIii
       if 66 - 66: iIii1I11I1II1 % i1IIi - O0 + iii1I1I * I1i1iI1i . Oo0ooO0oo0oO
       if 52 - 52: II + O0 . O0oo0OO0 . o0OOO . O0O
     if 'origin' in O0Oooo :
      oOo . add_header ( 'Origin' , O0Oooo [ 'origin' ] )
     if Ii11i1I11i :
      Ii11i1I11i = Ii11i1I11i . split ( '&' )
      for iIiIIIIIii in Ii11i1I11i :
       OOo0 , ii11I1 = iIiIIIIIii . split ( '=' )
       oOo . add_header ( OOo0 , ii11I1 )
       if 97 - 97: oOooOoO0Oo0O / O0oo0OO0
       if 71 - 71: i11i / i1IIi . o0OOO % OoooooooOO . oo000
     if not cookieJar == None :
      Iiiiii111i1ii = urllib2 . HTTPCookieProcessor ( cookieJar )
      i1i1iII1 = urllib2 . build_opener ( Iiiiii111i1ii , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
      i1i1iII1 = urllib2 . install_opener ( i1i1iII1 )
      if 'noredirect' in O0Oooo :
       iii11i1IIII = urllib2 . build_opener ( IiiiIiI1iIiI1 )
       i1i1iII1 = urllib2 . install_opener ( iii11i1IIII )
       if 26 - 26: O0 . O0O * I1i1iI1i . oOooOoO0Oo0O % i11iIiiIii
     if 'connection' in O0Oooo :
      print '..........................connection//////.' , O0Oooo [ 'connection' ]
      from keepalive import HTTPHandler
      i1Ii1iii = HTTPHandler ( )
      i1i1iII1 = urllib2 . build_opener ( i1Ii1iii )
      urllib2 . install_opener ( i1i1iII1 )
      if 28 - 28: iiiiIi11i . i11i / o0OOO + i11i . OoooooooOO . Oo0ooO0oo0oO
     O000OOO0OOo = None
     if 32 - 32: O00oOoOoO0o0O * O0
     if 'post' in O0Oooo :
      O00oOo00o0o = O0Oooo [ 'post' ]
      if '$LiveStreamRecaptcha' in O00oOo00o0o :
       ( O00oO0 , O0Oo00OoOo ) = ii1ii111 ( O0Oooo [ 'page' ] )
       if O00oO0 :
        O00oOo00o0o += 'recaptcha_challenge_field:' + O00oO0 + ',recaptcha_response_field:' + O0Oo00OoOo
      i11111I1I = O00oOo00o0o . split ( ',' ) ;
      O000OOO0OOo = { }
      for ii1 in i11111I1I :
       OOo0 = ii1 . split ( ':' ) [ 0 ] ;
       ii11I1 = ii1 . split ( ':' ) [ 1 ] ;
       O000OOO0OOo [ OOo0 ] = ii11I1
      O000OOO0OOo = urllib . urlencode ( O000OOO0OOo )
      if 80 - 80: OoooooooOO - Ii1I * O00oOoOoO0o0O * o0OOO / oOooOoO0Oo0O / Ii1I
     if 'rawpost' in O0Oooo :
      O000OOO0OOo = O0Oooo [ 'rawpost' ]
      if '$LiveStreamRecaptcha' in O000OOO0OOo :
       ( O00oO0 , O0Oo00OoOo ) = ii1ii111 ( O0Oooo [ 'page' ] )
       if O00oO0 :
        O000OOO0OOo += '&recaptcha_challenge_field=' + O00oO0 + '&recaptcha_response_field=' + O0Oo00OoOo
        if 13 - 13: I1i1iI1i * II + i11iIiiIii * I1i1iI1i - II
        if 23 - 23: iIii1I11I1II1 * i1IIi % OoooooooOO * Oo0ooO0oo0oO
        if 9 - 9: Oo0ooO0oo0oO - i11i + O0 / iIii1I11I1II1 / i11iIiiIii
        if 39 - 39: Oo0ooO0oo0oO * IIiI1I11i11 + iIii1I11I1II1 - Oo0ooO0oo0oO + Ii1I
     if O000OOO0OOo :
      oOoOoO = urllib2 . urlopen ( oOo , O000OOO0OOo )
     else :
      oOoOoO = urllib2 . urlopen ( oOo )
      if 69 - 69: O0
     ii11i1iIII = oOoOoO . read ( )
     ii11i1iIII = o0ooO ( ii11i1iIII )
     if 'includeheaders' in O0Oooo :
      ii11i1iIII += str ( oOoOoO . headers . get ( 'Set-Cookie' ) )
      if 74 - 74: O0 * iiiiIi11i - i11iIiiIii + I1i1iI1i
     oOoOoO . close ( )
     cachedPages [ O0Oooo [ 'page' ] ] = ii11i1iIII
     if 17 - 17: iIii1I11I1II1 . OoooooooOO / iii1I1I % i11i % i1IIi / i11iIiiIii
     if forCookieJarOnly :
      return cookieJar
    elif O0Oooo [ 'page' ] and not O0Oooo [ 'page' ] . startswith ( 'http' ) :
     if O0Oooo [ 'page' ] . startswith ( '$pyFunction:' ) :
      OOO = Iiiiii1iI ( O0Oooo [ 'page' ] . split ( '$pyFunction:' ) [ 1 ] , '' , cookieJar )
      if forCookieJarOnly :
       return cookieJar
      ii11i1iIII = OOO
     else :
      ii11i1iIII = O0Oooo [ 'page' ]
   if '$pyFunction:playmedia(' in O0Oooo [ 'expre' ] or 'ActivateWindow' in O0Oooo [ 'expre' ] or any ( x in url for x in Oo ) :
    oOoO0 = False
   if '$doregex' in O0Oooo [ 'expre' ] :
    O0Oooo [ 'expre' ] = ooOii ( regexs , O0Oooo [ 'expre' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 49 - 49: IiIi11iIIi1Ii . Oo0ooO0oo0oO / O0O + i11i
    if 47 - 47: O0 / O00oOoOoO0o0O
   if not O0Oooo [ 'expre' ] == '' :
    print 'doing it ' , O0Oooo [ 'expre' ]
    if '$LiveStreamCaptcha' in O0Oooo [ 'expre' ] :
     OOO = oO0OO0 ( O0Oooo , ii11i1iIII , cookieJar )
     url = url . replace ( "$doregex[" + Oo00o0OO0O00o + "]" , OOO )
    elif O0Oooo [ 'expre' ] . startswith ( '$pyFunction:' ) :
     OOO = Iiiiii1iI ( O0Oooo [ 'expre' ] . split ( '$pyFunction:' ) [ 1 ] , ii11i1iIII , cookieJar )
     if 'ActivateWindow' in O0Oooo [ 'expre' ] : return
     print 'still hre'
     print 'url k val' , url , Oo00o0OO0O00o , OOO
     if 82 - 82: Oo0ooO0oo0oO - Oo0ooO0oo0oO + oo000
     url = url . replace ( "$doregex[" + Oo00o0OO0O00o + "]" , OOO )
    else :
     if not ii11i1iIII == '' :
      II111Ii1i1 = re . compile ( O0Oooo [ 'expre' ] ) . search ( ii11i1iIII )
      OOO = ''
      try :
       OOO = II111Ii1i1 . group ( 1 ) . strip ( )
      except : traceback . print_exc ( )
     else :
      OOO = O0Oooo [ 'expre' ]
     if rawPost :
      print 'rawpost'
      OOO = urllib . quote_plus ( OOO )
     if 'htmlunescape' in O0Oooo :
      import HTMLParser
      OOO = HTMLParser . HTMLParser ( ) . unescape ( OOO )
     url = url . replace ( "$doregex[" + Oo00o0OO0O00o + "]" , OOO )
   else :
    url = url . replace ( "$doregex[" + Oo00o0OO0O00o + "]" , '' )
 if '$epoctime$' in url :
  url = url . replace ( '$epoctime$' , O000OoOO0 ( ) )
 if '$epoctime2$' in url :
  url = url . replace ( '$epoctime2$' , oOO ( ) )
  if 98 - 98: O0O . O0O * iiiiIi11i * i11i * I1i1iI1i
 if '$GUID$' in url :
  import uuid
  url = url . replace ( '$GUID$' , str ( uuid . uuid1 ( ) ) . upper ( ) )
 if '$get_cookies$' in url :
  url = url . replace ( '$get_cookies$' , oOooO0 ( cookieJar ) )
  if 79 - 79: O0O - iIii1I11I1II1 + O00oOoOoO0o0O - I1i1iI1i
 if recursiveCall : return url
 print 'final url' , url
 if url == "" :
  return
 else :
  return url , oOoO0
  if 93 - 93: i11i . oOooOoO0Oo0O - IIiI1I11i11 + oo000
def ooO0o ( t ) :
 import hashlib
 iIiIIIIIii = hashlib . md5 ( )
 iIiIIIIIii . update ( t )
 return iIiIIIIIii . hexdigest ( )
 if 89 - 89: iii1I1I / I1i1iI1i
def oooO0o0o0O0 ( encrypted ) :
 iii11111I = ""
 for OOO in encrypted . split ( ':' ) :
  iii11111I += chr ( int ( OOO . replace ( "0m0" , "" ) ) / 84 / 5 )
 return iii11111I
 if 16 - 16: iIii1I11I1II1 - Oo0ooO0oo0oO
def o00o ( media_url ) :
 try :
  import CustomPlayer
  Ii1IIiiIIi = CustomPlayer . MyXBMCPlayer ( )
  Oo000o = xbmcgui . ListItem ( label = str ( O00O0oOO00O00 ) , iconImage = "DefaultVideo.png" , thumbnailImage = xbmc . getInfoImage ( "ListItem.Thumb" ) , path = media_url )
  Ii1IIiiIIi . play ( media_url , Oo000o )
  xbmc . sleep ( 1000 )
  while Ii1IIiiIIi . is_active :
   xbmc . sleep ( 200 )
 except :
  traceback . print_exc ( )
 return ''
 if 39 - 39: o0OOO
 if 97 - 97: Ii1I - O0O / O00oOoOoO0o0O . i11iIiiIii % iiiiIi11i * iiiiIi11i
def ii1IIIIiI11 ( page_value , referer = None ) :
 if referer :
  referer = [ ( 'Referer' , referer ) ]
 if page_value . startswith ( "http" ) :
  iI1IIIii = page_value
  page_value = OO0O00oOo ( page_value , headers = referer )
  if 7 - 7: Oo0ooO0oo0oO - iii1I1I / i11i * O00oOoOoO0o0O . O0oo0OO0 * O0oo0OO0
 O0O0oOOo0O = "(eval\(function\(p,a,c,k,e,(?:r|d).*)"
 if 19 - 19: IiIi11iIIi1Ii / I1i1iI1i % IiIi11iIIi1Ii % O0oo0OO0 * Oo0ooO0oo0oO
 ii1oOoO0o0ooo = re . compile ( O0O0oOOo0O ) . findall ( page_value )
 ooO = ""
 if ii1oOoO0o0ooo and len ( ii1oOoO0o0ooo ) > 0 :
  for ii11I1 in ii1oOoO0o0ooo :
   oO0o0O0Ooo0o = i1Ii11II ( ii11I1 )
   Ii = Ii1I1I1i1Ii ( oO0o0O0Ooo0o , '\'(.*?)\'' )
   if 'unescape' in oO0o0O0Ooo0o :
    oO0o0O0Ooo0o = urllib . unquote ( Ii )
   ooO += oO0o0O0Ooo0o + '\n'
  print 'final value is ' , ooO
  if 77 - 77: oo000 % O00oOoOoO0o0O
  iI1IIIii = Ii1I1I1i1Ii ( ooO , 'src="(.*?)"' )
  if 9 - 9: O0O - IIiI1I11i11 * OoooooooOO . IIiI1I11i11
  page_value = OO0O00oOo ( iI1IIIii , headers = referer )
  if 2 - 2: OoooooooOO % Ii1I
  if 63 - 63: oOooOoO0Oo0O % iIii1I11I1II1
 I1ii = Ii1I1I1i1Ii ( page_value , 'streamer\'.*?\'(.*?)\'\)' )
 O00O0O = Ii1I1I1i1Ii ( page_value , 'file\',\s\'(.*?)\'' )
 if 19 - 19: O0O * iii1I1I / iii1I1I . OoooooooOO - Ii1I + i11iIiiIii
 if 88 - 88: i11iIiiIii - II
 return I1ii + ' playpath=' + O00O0O + ' pageUrl=' + iI1IIIii
 if 67 - 67: Ii1I . IIiI1I11i11 + oo000 - OoooooooOO
def OOOoO ( page_value , referer = None ) :
 if referer :
  referer = [ ( 'Referer' , referer ) ]
 if page_value . startswith ( "http" ) :
  page_value = OO0O00oOo ( page_value , headers = referer )
 O0O0oOOo0O = "var a = (.*?);\s*var b = (.*?);\s*var c = (.*?);\s*var d = (.*?);\s*var f = (.*?);\s*var v_part = '(.*?)';"
 ii1oOoO0o0ooo = re . compile ( O0O0oOOo0O ) . findall ( page_value ) [ 0 ]
 if 14 - 14: iii1I1I . iIii1I11I1II1 . OoooooooOO . i11i / IiIi11iIIi1Ii
 Oo0O00O000 , o000o , iiIiI1i1 , IiIi1 , i111iiI1ii , ii11I1 = ( ii1oOoO0o0ooo )
 i111iiI1ii = int ( i111iiI1ii )
 Oo0O00O000 = int ( Oo0O00O000 ) / i111iiI1ii
 o000o = int ( o000o ) / i111iiI1ii
 iiIiI1i1 = int ( iiIiI1i1 ) / i111iiI1ii
 IiIi1 = int ( IiIi1 ) / i111iiI1ii
 if 24 - 24: oo000 / OoooooooOO . i11i . oOooOoO0Oo0O % O0 % O00oOoOoO0o0O
 IiIII1i1i = 'rtmp://' + str ( Oo0O00O000 ) + '.' + str ( o000o ) + '.' + str ( iiIiI1i1 ) + '.' + str ( IiIi1 ) + ii11I1 ;
 return IiIII1i1i
 if 41 - 41: IIiI1I11i11 / O00oOoOoO0o0O * O00oOoOoO0o0O - Ii1I . I1i1iI1i . OoooooooOO
def I1iIIi111i1 ( url , useragent = None ) :
 str = '#EXTM3U'
 str += '\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=361816'
 str += '\n' + url + '&bytes=0-200000'
 iII111ii = os . path . join ( Oo0o0000o0o0 , 'testfile.m3u' )
 str += '\n'
 ii ( iII111ii , str )
 return iII111ii
 if 32 - 32: O00oOoOoO0o0O % o0OOO - Ii1I * IiIi11iIIi1Ii + iii1I1I
def ii ( file_name , page_data , append = False ) :
 if append :
  i111iiI1ii = open ( file_name , 'a' )
  i111iiI1ii . write ( page_data )
  i111iiI1ii . close ( )
 else :
  i111iiI1ii = open ( file_name , 'wb' )
  i111iiI1ii . write ( page_data )
  i111iiI1ii . close ( )
  return ''
  if 10 - 10: oOooOoO0Oo0O / IIiI1I11i11 % o0OOO * II
def I11oo0ooOO ( file_name ) :
 i111iiI1ii = open ( file_name , 'rb' )
 IiIi1 = i111iiI1ii . read ( )
 i111iiI1ii . close ( )
 return IiIi1
 if 24 - 24: O0O % O0O * iIii1I11I1II1
def III ( page_data ) :
 import re , base64 , urllib ;
 iIiIi11Ii = page_data
 while 'geh(' in iIiIi11Ii :
  if iIiIi11Ii . startswith ( 'lol(' ) : iIiIi11Ii = iIiIi11Ii [ 5 : - 1 ]
  iIiIi11Ii = re . compile ( '"(.*?)"' ) . findall ( iIiIi11Ii ) [ 0 ] ;
  iIiIi11Ii = base64 . b64decode ( iIiIi11Ii ) ;
  iIiIi11Ii = urllib . unquote ( iIiIi11Ii ) ;
 print iIiIi11Ii
 return iIiIi11Ii
 if 23 - 23: iiiiIi11i - Ii1I + iii1I1I
def II11 ( page_data ) :
 print 'get_dag_url2' , page_data
 Iiii11iIi1 = OO0O00oOo ( page_data ) ;
 i1iI11I1II1 = '(http.*)'
 import uuid
 ii11II1i = str ( uuid . uuid1 ( ) ) . upper ( )
 OOOO000o0 = re . compile ( i1iI11I1II1 ) . findall ( Iiii11iIi1 )
 ooOO00oOo = [ ( 'X-Playback-Session-Id' , ii11II1i ) ]
 for oO0 in OOOO000o0 :
  try :
   o000OoOoO0 = OO0O00oOo ( oO0 , headers = ooOO00oOo ) ;
   if 99 - 99: IiIi11iIIi1Ii * oOooOoO0Oo0O % IIiI1I11i11 . oo000
  except : pass
  if 58 - 58: iii1I1I + i11i * O0oo0OO0 * i11iIiiIii - iIii1I11I1II1
 return page_data + '|&X-Playback-Session-Id=' + ii11II1i
 if 68 - 68: OoooooooOO % i11i
 if 26 - 26: i11i % i11iIiiIii % iIii1I11I1II1 % iii1I1I * iii1I1I * o0OOO
def IiI1I11iIii ( page_data ) :
 print 'get_dag_url' , page_data
 if page_data . startswith ( 'http://dag.total-stream.net' ) :
  ooOO00oOo = [ ( 'User-Agent' , 'Verismo-BlackUI_(2.4.7.5.8.0.34)' ) ]
  page_data = OO0O00oOo ( page_data , headers = ooOO00oOo ) ;
  if 63 - 63: O0oo0OO0 * iii1I1I * O00oOoOoO0o0O - iiiiIi11i - O00oOoOoO0o0O
 if '127.0.0.1' in page_data :
  return o0oo ( page_data )
 elif Ii1I1I1i1Ii ( page_data , 'wmsAuthSign%3D([^%&]+)' ) != '' :
  oOoOoo0 = Ii1I1I1i1Ii ( page_data , '&ver_t=([^&]+)&' ) + '?wmsAuthSign=' + Ii1I1I1i1Ii ( page_data , 'wmsAuthSign%3D([^%&]+)' ) + '==/mp4:' + Ii1I1I1i1Ii ( page_data , '\\?y=([^&]+)&' )
 else :
  oOoOoo0 = Ii1I1I1i1Ii ( page_data , 'href="([^"]+)"[^"]+$' )
  if len ( oOoOoo0 ) == 0 :
   oOoOoo0 = page_data
 oOoOoo0 = oOoOoo0 . replace ( ' ' , '%20' )
 return oOoOoo0
 if 16 - 16: oOooOoO0Oo0O
def Ii1I1I1i1Ii ( data , re_patten ) :
 Oo0O00Oo0o0 = ''
 O0Oooo = re . search ( re_patten , data )
 if O0Oooo != None :
  Oo0O00Oo0o0 = O0Oooo . group ( 1 )
 else :
  Oo0O00Oo0o0 = ''
 return Oo0O00Oo0o0
 if 6 - 6: Ii1I - o0OOO + O00oOoOoO0o0O + i1IIi / O0 / IiIi11iIIi1Ii
def o0oo ( page_data ) :
 oOoOoo0 = ''
 if '127.0.0.1' in page_data :
  oOoOoo0 = Ii1I1I1i1Ii ( page_data , '&ver_t=([^&]+)&' ) + ' live=true timeout=15 playpath=' + Ii1I1I1i1Ii ( page_data , '\\?y=([a-zA-Z0-9-_\\.@]+)' )
  if 42 - 42: i1IIi . oOooOoO0Oo0O / i1IIi + O00oOoOoO0o0O
 if Ii1I1I1i1Ii ( page_data , 'token=([^&]+)&' ) != '' :
  oOoOoo0 = oOoOoo0 + '?token=' + Ii1I1I1i1Ii ( page_data , 'token=([^&]+)&' )
 elif Ii1I1I1i1Ii ( page_data , 'wmsAuthSign%3D([^%&]+)' ) != '' :
  oOoOoo0 = Ii1I1I1i1Ii ( page_data , '&ver_t=([^&]+)&' ) + '?wmsAuthSign=' + Ii1I1I1i1Ii ( page_data , 'wmsAuthSign%3D([^%&]+)' ) + '==/mp4:' + Ii1I1I1i1Ii ( page_data , '\\?y=([^&]+)&' )
 else :
  oOoOoo0 = Ii1I1I1i1Ii ( page_data , 'HREF="([^"]+)"' )
  if 54 - 54: II % Ii1I . I1i1iI1i + iiiiIi11i - Ii1I * oOooOoO0Oo0O
 if 'dag1.asx' in oOoOoo0 :
  return IiI1I11iIii ( oOoOoo0 )
  if 92 - 92: IiIi11iIIi1Ii + I1i1iI1i / IIiI1I11i11 % O0O % Oo0ooO0oo0oO . OoooooooOO
 if 'devinlivefs.fplive.net' not in oOoOoo0 :
  oOoOoo0 = oOoOoo0 . replace ( 'devinlive' , 'flive' )
 if 'permlivefs.fplive.net' not in oOoOoo0 :
  oOoOoo0 = oOoOoo0 . replace ( 'permlive' , 'flive' )
 return oOoOoo0
 if 52 - 52: II / i11iIiiIii - Ii1I . Oo0ooO0oo0oO % iIii1I11I1II1 + IiIi11iIIi1Ii
 if 71 - 71: iiiiIi11i % iii1I1I * oo000 . O0 / O00oOoOoO0o0O . o0OOO
def oOOOo ( str_eval ) :
 OO0O0o0o0 = ""
 try :
  iIIIIIiI1I1 = "w,i,s,e=(" + str_eval + ')'
  exec ( iIIIIIiI1I1 )
  OO0O0o0o0 = I11I1IIiiII1 ( w , i , s , e )
 except : traceback . print_exc ( file = sys . stdout )
 return OO0O0o0o0
 if 31 - 31: oOooOoO0Oo0O * iiiiIi11i + OoooooooOO - O0oo0OO0 / OoooooooOO
def I11I1IIiiII1 ( w , i , s , e ) :
 I111IIiii1Ii = 0 ;
 II1 = 0 ;
 iiIIIiIii = 0 ;
 I1i11II = [ ] ;
 II11I1iii = [ ] ;
 while True :
  if ( I111IIiii1Ii < 5 ) :
   II11I1iii . append ( w [ I111IIiii1Ii ] )
  elif ( I111IIiii1Ii < len ( w ) ) :
   I1i11II . append ( w [ I111IIiii1Ii ] ) ;
  I111IIiii1Ii += 1 ;
  if ( II1 < 5 ) :
   II11I1iii . append ( i [ II1 ] )
  elif ( II1 < len ( i ) ) :
   I1i11II . append ( i [ II1 ] )
  II1 += 1 ;
  if ( iiIIIiIii < 5 ) :
   II11I1iii . append ( s [ iiIIIiIii ] )
  elif ( iiIIIiIii < len ( s ) ) :
   I1i11II . append ( s [ iiIIIiIii ] ) ;
  iiIIIiIii += 1 ;
  if ( len ( w ) + len ( i ) + len ( s ) + len ( e ) == len ( I1i11II ) + len ( II11I1iii ) + len ( e ) ) :
   break ;
   if 51 - 51: o0OOO
 III1I1Ii11iI = '' . join ( I1i11II )
 oO00OoOO = '' . join ( II11I1iii )
 II1 = 0 ;
 I11IIiIiI = [ ] ;
 for I111IIiii1Ii in range ( 0 , len ( I1i11II ) , 2 ) :
  iIIIi1i1I11i = - 1 ;
  if ( ord ( oO00OoOO [ II1 ] ) % 2 ) :
   iIIIi1i1I11i = 1 ;
  I11IIiIiI . append ( chr ( int ( III1I1Ii11iI [ I111IIiii1Ii : I111IIiii1Ii + 2 ] , 36 ) - iIIIi1i1I11i ) ) ;
  II1 += 1 ;
  if ( II1 >= len ( II11I1iii ) ) :
   II1 = 0 ;
 IiIII1i1i = '' . join ( I11IIiIiI )
 if 'eval(function(w,i,s,e)' in IiIII1i1i :
  print 'STILL GOing'
  IiIII1i1i = re . compile ( 'eval\(function\(w,i,s,e\).*}\((.*?)\)' ) . findall ( IiIII1i1i ) [ 0 ]
  return oOOOo ( IiIII1i1i )
 else :
  print 'FINISHED'
  return IiIII1i1i
  if 55 - 55: IIiI1I11i11 - Ii1I
def i1Ii11II ( page_value , regex_for_text = '' , iterations = 1 , total_iteration = 1 ) :
 try :
  O0OO0O = None
  if page_value . startswith ( "http" ) :
   page_value = OO0O00oOo ( page_value )
  print 'page_value' , page_value
  if regex_for_text and len ( regex_for_text ) > 0 :
   page_value = re . compile ( regex_for_text ) . findall ( page_value ) [ 0 ]
   if 49 - 49: iIii1I11I1II1 - O0 . i1IIi - OoooooooOO
  page_value = Ii1 ( page_value , iterations , total_iteration )
 except : traceback . print_exc ( file = sys . stdout )
 print 'unpacked' , page_value
 if 'sav1live.tv' in page_value :
  page_value = page_value . replace ( 'sav1live.tv' , 'sawlive.tv' )
  print 'sav1 unpacked' , page_value
 return page_value
 if 73 - 73: i1IIi + O0oo0OO0 . i11iIiiIii
def Ii1 ( sJavascript , iteration = 1 , totaliterations = 2 ) :
 print 'iteration' , iteration
 if sJavascript . startswith ( 'var _0xcb8a=' ) :
  IIi = sJavascript . split ( 'var _0xcb8a=' )
  iIIIIIiI1I1 = "myarray=" + IIi [ 1 ] . split ( "eval(" ) [ 0 ]
  exec ( iIIIIIiI1I1 )
  oo0OO = 62
  IiiI11i1I = int ( IIi [ 1 ] . split ( ",62," ) [ 1 ] . split ( ',' ) [ 0 ] )
  OOo0iiIii1IIi = myarray [ 0 ]
  ii1IiIiI1 = myarray [ 3 ]
  with open ( 'temp file' + str ( iteration ) + '.js' , "wb" ) as OOOoOo00O :
   OOOoOo00O . write ( str ( ii1IiIiI1 ) )
 else :
  if 59 - 59: Ii1I % iIii1I11I1II1 . i1IIi + i11i * Oo0ooO0oo0oO
  IIi = sJavascript . split ( "rn p}('" )
  print IIi
  if 41 - 41: O00oOoOoO0o0O % o0OOO
  OOo0iiIii1IIi , oo0OO , IiiI11i1I , ii1IiIiI1 = ( '' , '0' , '0' , '' )
  if 12 - 12: Ii1I
  iIIIIIiI1I1 = "p1,a1,c1,k1=('" + IIi [ 1 ] . split ( ".spli" ) [ 0 ] + ')'
  exec ( iIIIIIiI1I1 )
 ii1IiIiI1 = ii1IiIiI1 . split ( '|' )
 IIi = IIi [ 1 ] . split ( "))'" )
 OooO0 = ''
 IiIi1 = ''
 if 69 - 69: OoooooooOO + Ii1I
 IIi11I1 = str ( iiiI111I ( OOo0iiIii1IIi , oo0OO , IiiI11i1I , ii1IiIiI1 , OooO0 , IiIi1 , iteration ) )
 if iteration >= totaliterations :
  return IIi11I1
 else :
  return Ii1 ( IIi11I1 , iteration + 1 )
  if 75 - 75: OoooooooOO % O0O / oOooOoO0Oo0O
def iiiI111I ( p , a , c , k , e , d , iteration , v = 1 ) :
 if 56 - 56: OoooooooOO % i11iIiiIii * iIii1I11I1II1 . O0O * O0
 while ( c >= 1 ) :
  c = c - 1
  if ( k [ c ] ) :
   iIO0O00OOo = str ( OoOOo ( c , a ) )
   if v == 1 :
    p = re . sub ( '\\b' + iIO0O00OOo + '\\b' , k [ c ] , p )
   else :
    p = iii1 ( p , iIO0O00OOo , k [ c ] )
 return p
 if 78 - 78: o0OOO + iii1I1I - O0
def iii1 ( source_str , word_to_find , replace_with ) :
 i1I1iIi1IiI = None
 i1I1iIi1IiI = source_str . split ( word_to_find )
 if len ( i1I1iIi1IiI ) > 1 :
  i1111 = [ ]
  O0O000OOOo = 0
  for i11ii1Ii1 in i1I1iIi1IiI :
   i1111 . append ( i11ii1Ii1 )
   OOO = word_to_find
   if 25 - 25: Ii1I
   if O0O000OOOo == len ( i1I1iIi1IiI ) - 1 :
    OOO = ''
   else :
    if len ( i11ii1Ii1 ) == 0 :
     if ( len ( i1I1iIi1IiI [ O0O000OOOo + 1 ] ) == 0 and word_to_find [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) or ( len ( i1I1iIi1IiI [ O0O000OOOo + 1 ] ) > 0 and i1I1iIi1IiI [ O0O000OOOo + 1 ] [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) :
      OOO = replace_with
    else :
     if ( i1I1iIi1IiI [ O0O000OOOo ] [ - 1 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) and ( ( len ( i1I1iIi1IiI [ O0O000OOOo + 1 ] ) == 0 and word_to_find [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) or ( len ( i1I1iIi1IiI [ O0O000OOOo + 1 ] ) > 0 and i1I1iIi1IiI [ O0O000OOOo + 1 ] [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) ) :
      OOO = replace_with
      if 83 - 83: I1i1iI1i
   i1111 . append ( OOO )
   O0O000OOOo += 1
  source_str = '' . join ( i1111 )
 return source_str
 if 48 - 48: i11i * Ii1I * I1i1iI1i
def i1iiiIii11 ( num , radix ) :
 i1I1i111Ii = ""
 if num == 0 : return '0'
 while num > 0 :
  i1I1i111Ii = "0123456789abcdefghijklmnopqrstuvwxyz" [ num % radix ] + i1I1i111Ii
  num /= radix
 return i1I1i111Ii
 if 67 - 67: IiIi11iIIi1Ii % oo000 . oo000 - II
def OoOOo ( cc , a ) :
 iIO0O00OOo = "" if cc < a else OoOOo ( int ( cc / a ) , a )
 cc = ( cc % a )
 O00ooOo = chr ( cc + 29 ) if cc > 35 else str ( i1iiiIii11 ( cc , 36 ) )
 return iIO0O00OOo + O00ooOo
 if 80 - 80: IiIi11iIIi1Ii - Ii1I + OoooooooOO
 if 98 - 98: Ii1I + i1IIi . oOooOoO0Oo0O - i11i - IiIi11iIIi1Ii
def oOooO0 ( cookieJar ) :
 try :
  iIIi1I1ii = ""
  for oO00o0 , Iiii in enumerate ( cookieJar ) :
   iIIi1I1ii += Iiii . name + "=" + Iiii . value + ";"
 except : pass
 return iIIi1I1ii
 if 44 - 44: II . O0oo0OO0 . OoooooooOO
 if 50 - 50: IiIi11iIIi1Ii * O00oOoOoO0o0O % o0OOO / IIiI1I11i11 - O0 % O0oo0OO0
def iIIIII1ii1I ( cookieJar , COOKIEFILE ) :
 try :
  Ii1i1iI = os . path . join ( Oo0o0000o0o0 , COOKIEFILE )
  cookieJar . save ( Ii1i1iI , ignore_discard = True )
 except : pass
 if 48 - 48: oOooOoO0Oo0O + o0OOO + i11i * i11iIiiIii
def OOOoOoO ( COOKIEFILE ) :
 if 13 - 13: OoooooooOO * iiiiIi11i - O00oOoOoO0o0O / Ii1I + iii1I1I + Oo0ooO0oo0oO
 iii1III1i = None
 if COOKIEFILE :
  try :
   Ii1i1iI = os . path . join ( Oo0o0000o0o0 , COOKIEFILE )
   iii1III1i = cookielib . LWPCookieJar ( )
   iii1III1i . load ( Ii1i1iI , ignore_discard = True )
  except :
   iii1III1i = None
   if 17 - 17: i11i / i11i
 if not iii1III1i :
  iii1III1i = cookielib . LWPCookieJar ( )
  if 65 - 65: Oo0ooO0oo0oO + IIiI1I11i11
 return iii1III1i
 if 59 - 59: OoooooooOO + iii1I1I . I1i1iI1i - O0 % iIii1I11I1II1 / O0
def Iiiiii1iI ( fun_call , page_data , Cookie_Jar ) :
 OOooO0o = ''
 if i1iIIi1 not in sys . path :
  sys . path . append ( i1iIIi1 )
  if 25 - 25: iIii1I11I1II1 - O0oo0OO0
 print fun_call
 try :
  IiI1IiI11iII = 'import ' + fun_call . split ( '.' ) [ 0 ]
  print IiI1IiI11iII , sys . path
  exec ( IiI1IiI11iII )
  print 'done'
 except :
  print 'error in import'
  traceback . print_exc ( file = sys . stdout )
 print 'ret_val=' + fun_call
 exec ( 'ret_val=' + fun_call )
 print OOooO0o
 return str ( OOooO0o )
 if 64 - 64: iiiiIi11i - oOooOoO0Oo0O / O0oo0OO0 - O0O
def ii1ii111 ( url ) :
 ii11I = OO0O00oOo ( url )
 i1IiIiiiIIIIi = ""
 ooOo00 = ""
 O00O0 = "<script.*?src=\"(.*?recap.*?)\""
 Oo0O00Oo0o0 = re . findall ( O00O0 , ii11I )
 iIiIiiiIi = False
 i1iiIIi11I = None
 ooOo00 = None
 if 80 - 80: II * O0
 if Oo0O00Oo0o0 and len ( Oo0O00Oo0o0 ) > 0 :
  oo000o0 = Oo0O00Oo0o0 [ 0 ]
  iIiIiiiIi = True
  if 25 - 25: iii1I1I + oo000 . IiIi11iIIi1Ii % oo000 * Ii1I
  ii1IiIi11 = 'challenge.*?\'(.*?)\''
  iiiii1ii1 = '\'(.*?)\''
  IiiiI1 = OO0O00oOo ( oo000o0 )
  i1IiIiiiIIIIi = re . findall ( ii1IiIi11 , IiiiI1 ) [ 0 ]
  OOOo0 = 'http://www.google.com/recaptcha/api/reload?c=' ;
  OOo0Oo0OOo0 = oo000o0 . split ( 'k=' ) [ 1 ]
  OOOo0 += i1IiIiiiIIIIi + '&k=' + OOo0Oo0OOo0 + '&captcha_k=1&type=image&lang=en-GB'
  i1i11I = OO0O00oOo ( OOOo0 )
  i1iiIIi11I = re . findall ( iiiii1ii1 , i1i11I ) [ 0 ]
  iiIiI = 'http://www.google.com/recaptcha/api/image?c=' + i1iiIIi11I
  if not iiIiI . startswith ( "http" ) :
   iiIiI = 'http://www.google.com/recaptcha/api/' + iiIiI
  import random
  OOo0 = random . randrange ( 100 , 1000 , 5 )
  i1oOOOOOOOoO = os . path . join ( Oo0o0000o0o0 , str ( OOo0 ) + "captcha.img" )
  I1 = open ( i1oOOOOOOOoO , "wb" )
  I1 . write ( OO0O00oOo ( iiIiI ) )
  I1 . close ( )
  IIiI = O0oOOo0o ( captcha = i1oOOOOOOOoO )
  ooOo00 = IIiI . get ( )
  os . remove ( i1oOOOOOOOoO )
 return i1iiIIi11I , ooOo00
 if 50 - 50: O0oo0OO0 . o0OOO . O0O * iii1I1I + i11i % i11iIiiIii
def OO0O00oOo ( url , cookieJar = None , post = None , timeout = 20 , headers = None ) :
 if 8 - 8: II * O0
 if 73 - 73: IiIi11iIIi1Ii / iiiiIi11i / iii1I1I / O0O
 Iiiiii111i1ii = urllib2 . HTTPCookieProcessor ( cookieJar )
 i1i1iII1 = urllib2 . build_opener ( Iiiiii111i1ii , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
 oOo = urllib2 . Request ( url )
 oOo . add_header = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
 if headers :
  for iIiIIIIIii , III1ii in headers :
   oOo . add_header ( iIiIIIIIii , III1ii )
   if 41 - 41: II . IIiI1I11i11 + oOooOoO0Oo0O
 oOoOoO = i1i1iII1 . open ( oOo , post , timeout = timeout )
 ii11i1iIII = oOoOoO . read ( )
 oOoOoO . close ( )
 return ii11i1iIII ;
 if 100 - 100: O00oOoOoO0o0O + O0O
def Oo00o0OO ( str , reg = None ) :
 if reg :
  str = re . findall ( reg , str ) [ 0 ]
 OO0ooo0o0 = urllib . unquote ( str [ 0 : len ( str ) - 1 ] ) ;
 oO0ooOoO = '' ;
 for Oo0O0OOOoo in range ( len ( OO0ooo0o0 ) ) :
  oO0ooOoO += chr ( ord ( OO0ooo0o0 [ Oo0O0OOOoo ] ) - OO0ooo0o0 [ len ( OO0ooo0o0 ) - 1 ] ) ;
 oO0ooOoO = urllib . unquote ( oO0ooOoO )
 print oO0ooOoO
 return oO0ooOoO
 if 59 - 59: O0 % IIiI1I11i11
def o0ooO ( str ) :
 O0o00O0Oo0 = re . findall ( 'unescape\(\'(.*?)\'' , str )
 print 'js' , O0o00O0Oo0
 if ( not O0o00O0Oo0 == None ) and len ( O0o00O0Oo0 ) > 0 :
  for o0 in O0o00O0Oo0 :
   str = str . replace ( o0 , urllib . unquote ( o0 ) )
 return str
 if 35 - 35: Oo0ooO0oo0oO + i1IIi * iiiiIi11i - O00oOoOoO0o0O . IIiI1I11i11
iiIii1II = 0
def oO0OO0 ( m , html_page , cookieJar ) :
 global iiIii1II
 iiIii1II += 1
 OoOoII = m [ 'expre' ]
 iI1IIIii = m [ 'page' ]
 IiiIIIiI1ii = re . compile ( '\$LiveStreamCaptcha\[([^\]]*)\]' ) . findall ( OoOoII ) [ 0 ]
 if 78 - 78: O0 * Ii1I
 oo000o0 = re . compile ( IiiIIIiI1ii ) . findall ( html_page ) [ 0 ]
 print OoOoII , IiiIIIiI1ii , oo000o0
 if not oo000o0 . startswith ( "http" ) :
  iIii1 = 'http://' + "" . join ( iI1IIIii . split ( '/' ) [ 2 : 3 ] )
  if oo000o0 . startswith ( "/" ) :
   oo000o0 = iIii1 + oo000o0
  else :
   oo000o0 = iIii1 + '/' + oo000o0
   if 62 - 62: iIii1I11I1II1 + O0oo0OO0 . IIiI1I11i11 / Oo0ooO0oo0oO % O0 . I1i1iI1i
 i1oOOOOOOOoO = os . path . join ( Oo0o0000o0o0 , str ( iiIii1II ) + "captcha.jpg" )
 I1 = open ( i1oOOOOOOOoO , "wb" )
 print ' c capurl' , oo000o0
 oOo = urllib2 . Request ( oo000o0 )
 oOo . add_header = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
 if 'refer' in m :
  oOo . add_header ( 'Referer' , m [ 'refer' ] )
 if 'agent' in m :
  oOo . add_header ( 'User-agent' , m [ 'agent' ] )
 if 'setcookie' in m :
  print 'adding cookie' , m [ 'setcookie' ]
  oOo . add_header ( 'Cookie' , m [ 'setcookie' ] )
  if 93 - 93: i11iIiiIii % iIii1I11I1II1 % i11iIiiIii + IiIi11iIIi1Ii / IiIi11iIIi1Ii / i11i
 urllib2 . urlopen ( oOo )
 oOoOoO = urllib2 . urlopen ( oOo )
 if 49 - 49: Ii1I . o0OOO . i11iIiiIii - i11i / O00oOoOoO0o0O
 I1 . write ( oOoOoO . read ( ) )
 oOoOoO . close ( )
 I1 . close ( )
 IIiI = O0oOOo0o ( captcha = i1oOOOOOOOoO )
 ooOo00 = IIiI . get ( )
 return ooOo00
 if 62 - 62: Ii1I
class O0oOOo0o ( xbmcgui . WindowDialog ) :
 def __init__ ( self , * args , ** kwargs ) :
  self . cptloc = kwargs . get ( 'captcha' )
  self . img = xbmcgui . ControlImage ( 335 , 30 , 624 , 60 , self . cptloc )
  self . addControl ( self . img )
  self . kbd = xbmc . Keyboard ( )
  if 1 - 1: Oo0ooO0oo0oO / Oo0ooO0oo0oO - i11iIiiIii
 def get ( self ) :
  self . show ( )
  time . sleep ( 2 )
  self . kbd . doModal ( )
  if ( self . kbd . isConfirmed ( ) ) :
   OO0o = self . kbd . getText ( )
   self . close ( )
   return OO0o
  self . close ( )
  return False
  if 32 - 32: OoooooooOO - oo000 - i11iIiiIii * IiIi11iIIi1Ii / IIiI1I11i11 + OoooooooOO
def O000OoOO0 ( ) :
 import time
 return str ( int ( time . time ( ) * 1000 ) )
 if 35 - 35: i1IIi - IiIi11iIIi1Ii * O0oo0OO0
def oOO ( ) :
 import time
 return str ( int ( time . time ( ) ) )
 if 63 - 63: O0oo0OO0 * o0OOO . OoooooooOO / Ii1I * IIiI1I11i11 . II
def Ooo0 ( ) :
 oooO00o0 = [ ]
 o0o00oO0oo000 = sys . argv [ 2 ]
 if len ( o0o00oO0oo000 ) >= 2 :
  oO000o = sys . argv [ 2 ]
  o0Oo = oO000o . replace ( '?' , '' )
  if ( oO000o [ len ( oO000o ) - 1 ] == '/' ) :
   oO000o = oO000o [ 0 : len ( oO000o ) - 2 ]
  o0O0 = o0Oo . split ( '&' )
  oooO00o0 = { }
  for Oo0O0OOOoo in range ( len ( o0O0 ) ) :
   I1I1Iiii1 = { }
   I1I1Iiii1 = o0O0 [ Oo0O0OOOoo ] . split ( '=' )
   if ( len ( I1I1Iiii1 ) ) == 2 :
    oooO00o0 [ I1I1Iiii1 [ 0 ] ] = I1I1Iiii1 [ 1 ]
 return oooO00o0
 if 2 - 2: iii1I1I + II
 if 76 - 76: I1i1iI1i
def OoOoOo0 ( ) :
 i1ioOOoo00O00o = json . loads ( open ( oO0o0o0ooO0oO ) . read ( ) )
 OOooooO0Oo = len ( i1ioOOoo00O00o )
 for Oo0O0OOOoo in i1ioOOoo00O00o :
  O00O0oOO00O00 = Oo0O0OOOoo [ 0 ]
  ii1ii11IIIiiI = Oo0O0OOOoo [ 1 ]
  i1II11II1 = Oo0O0OOOoo [ 2 ]
  try :
   o0o = Oo0O0OOOoo [ 3 ]
   if o0o == None :
    raise
  except :
   if i11 . getSetting ( 'use_thumb' ) == "true" :
    o0o = i1II11II1
   else :
    o0o = oOO00oOO
  try : i11ii1ii11i = Oo0O0OOOoo [ 5 ]
  except : i11ii1ii11i = None
  try : I1Ii1I1 = Oo0O0OOOoo [ 6 ]
  except : I1Ii1I1 = None
  if 5 - 5: IIiI1I11i11 - o0OOO % iiiiIi11i - i11i . oOooOoO0Oo0O + O0oo0OO0
  if Oo0O0OOOoo [ 4 ] == 0 :
   i1i ( ii1ii11IIIiiI , O00O0oOO00O00 , i1II11II1 , o0o , '' , '' , '' , 'fav' , i11ii1ii11i , I1Ii1I1 , OOooooO0Oo )
  else :
   oo0oooooO0 ( O00O0oOO00O00 , ii1ii11IIIiiI , Oo0O0OOOoo [ 4 ] , i1II11II1 , oOO00oOO , '' , '' , '' , '' , 'fav' )
   if 47 - 47: O0 - iIii1I11I1II1 - O0oo0OO0
   if 46 - 46: O00oOoOoO0o0O . Ii1I * O0O . OoooooooOO + o0OOO
def oo0000o ( name , url , iconimage , fanart , mode , playlist = None , regexs = None ) :
 iII1I1 = [ ]
 try :
  name = name . encode ( 'utf-8' , 'ignore' )
 except :
  pass
 if os . path . exists ( oO0o0o0ooO0oO ) == False :
  OO ( 'Making Favorites File' )
  iII1I1 . append ( ( name , url , iconimage , fanart , mode , playlist , regexs ) )
  Oo0O00O000 = open ( oO0o0o0ooO0oO , "w" )
  Oo0O00O000 . write ( json . dumps ( iII1I1 ) )
  Oo0O00O000 . close ( )
 else :
  OO ( 'Appending Favorites' )
  Oo0O00O000 = open ( oO0o0o0ooO0oO ) . read ( )
  ii1I = json . loads ( Oo0O00O000 )
  ii1I . append ( ( name , url , iconimage , fanart , mode ) )
  o000o = open ( oO0o0o0ooO0oO , "w" )
  o000o . write ( json . dumps ( ii1I ) )
  o000o . close ( )
  if 38 - 38: I1i1iI1i % Ii1I - OoooooooOO
  if 87 - 87: O0O % oOooOoO0Oo0O
def ooooOoO0O ( name ) :
 ii1I = json . loads ( open ( oO0o0o0ooO0oO ) . read ( ) )
 for oO00o0 in range ( len ( ii1I ) ) :
  if ii1I [ oO00o0 ] [ 0 ] == name :
   del ii1I [ oO00o0 ]
   o000o = open ( oO0o0o0ooO0oO , "w" )
   o000o . write ( json . dumps ( ii1I ) )
   o000o . close ( )
   break
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 1 - 1: o0OOO / O0O + iiiiIi11i . IiIi11iIIi1Ii / o0OOO - O0oo0OO0
def Oo0O0 ( url ) :
 if i11 . getSetting ( 'Updatecommonresolvers' ) == 'true' :
  oO0 = os . path . join ( oOo0oooo00o , 'genesisresolvers.py' )
  if xbmcvfs . exists ( oO0 ) :
   os . remove ( oO0 )
   if 5 - 5: Ii1I
  I1i1iIi1I1 = 'https://raw.githubusercontent.com/lambda81/lambda-addons/master/plugin.video.genesis/commonresolvers.py'
  OOO0 = urllib . urlretrieve ( I1i1iIi1I1 , oO0 )
  i11 . setSetting ( 'Updatecommonresolvers' , 'false' )
 try :
  import genesisresolvers
 except Exception :
  xbmc . executebuiltin ( "XBMC.Notification(Pauls World,Please enable Update Commonresolvers to Play in Settings. - ,10000)" )
  if 10 - 10: IIiI1I11i11 + O0
 Ii1iI = genesisresolvers . get ( url ) . result
 if url == Ii1iI or Ii1iI is None :
  xbmc . executebuiltin ( "XBMC.Notification(Pauls World, Attempting To Load Video... - ,5000)" )
  import urlresolver
  Oo0O0O000 = urlresolver . HostedMediaFile ( url )
  if Oo0O0O000 :
   II1Ii = urlresolver . resolve ( url )
   Ii1iI = II1Ii
 if Ii1iI :
  if isinstance ( Ii1iI , list ) :
   for Oo00o0OO0O00o in Ii1iI :
    OOoO00ooO = i11 . getSetting ( 'quality' )
    if Oo00o0OO0O00o [ 'quality' ] == 'HD' :
     II1Ii = Oo00o0OO0O00o [ 'url' ]
     break
    elif Oo00o0OO0O00o [ 'quality' ] == 'SD' :
     II1Ii = Oo00o0OO0O00o [ 'url' ]
    elif Oo00o0OO0O00o [ 'quality' ] == '1080p' and i11 . getSetting ( '1080pquality' ) == 'true' :
     II1Ii = Oo00o0OO0O00o [ 'url' ]
     break
  else :
   II1Ii = Ii1iI
 return II1Ii
def I1IIIIiii1i ( name , mu_playlist ) :
 import urlparse
 if i11 . getSetting ( 'ask_playlist_items' ) == 'true' :
  o0IiiiI111I = [ ]
  for Oo0O0OOOoo in mu_playlist :
   III1I11i1iIi = urlparse . urlparse ( Oo0O0OOOoo ) . netloc
   if III1I11i1iIi == '' :
    o0IiiiI111I . append ( name )
   else :
    o0IiiiI111I . append ( III1I11i1iIi )
  o0OO00 = xbmcgui . Dialog ( )
  oO00o0 = o0OO00 . select ( 'Choose a video source' , o0IiiiI111I )
  if oO00o0 >= 0 :
   if "&mode=19" in mu_playlist [ oO00o0 ] :
    xbmc . Player ( ) . play ( Oo0O0 ( mu_playlist [ oO00o0 ] . replace ( '&mode=19' , '' ) ) )
   elif "$doregex" in mu_playlist [ oO00o0 ] :
    if 69 - 69: IIiI1I11i11 * i11i * II . O0oo0OO0 - o0OOO
    I11iiIIiI1ii = mu_playlist [ oO00o0 ] . split ( '&regexs=' )
    if 12 - 12: I1i1iI1i % i11iIiiIii + IiIi11iIIi1Ii + I1i1iI1i / iii1I1I
    ii1ii11IIIiiI , oOoO0 = ooOii ( I11iiIIiI1ii [ 1 ] , I11iiIIiI1ii [ 0 ] )
    xbmc . Player ( ) . play ( ii1ii11IIIiiI )
   else :
    ii1ii11IIIiiI = mu_playlist [ oO00o0 ]
    xbmc . Player ( ) . play ( ii1ii11IIIiiI )
 else :
  i11ii1ii11i = xbmc . PlayList ( 1 )
  i11ii1ii11i . clear ( )
  iiIiIIIiiI = 0
  for Oo0O0OOOoo in mu_playlist :
   iiIiIIIiiI += 1
   O00 = xbmcgui . ListItem ( '%s) %s' % ( str ( iiIiIIIiiI ) , name ) )
   i11ii1ii11i . add ( Oo0O0OOOoo , O00 )
   xbmc . executebuiltin ( 'playlist.playoffset(video,0)' )
   if 94 - 94: iii1I1I . iii1I1I + i11iIiiIii - Ii1I * o0OOO
   if 9 - 9: IiIi11iIIi1Ii . oOooOoO0Oo0O - o0OOO
def IiiiI ( name , url ) :
 if i11 . getSetting ( 'save_location' ) == "" :
  xbmc . executebuiltin ( "XBMC.Notification('Pauls World','Choose a location to save files.',15000," + I1IiIiiIII + ")" )
  i11 . openSettings ( )
 oO000o = { 'url' : url , 'download_path' : i11 . getSetting ( 'save_location' ) }
 downloader . download ( name , oO000o )
 o0OO00 = xbmcgui . Dialog ( )
 IiIII1i1i = o0OO00 . yesno ( 'Pauls World' , 'Do you want to add this file as a source?' )
 if IiIII1i1i :
  O0oo0OO0oOOOo ( os . path . join ( i11 . getSetting ( 'save_location' ) , name ) )
  if 12 - 12: i11i
  if 2 - 2: i1IIi - oOooOoO0Oo0O + iii1I1I . i11i
def oo0oooooO0 ( name , url , mode , iconimage , fanart , description , genre , date , credits , showcontext = False ) :
 if 25 - 25: iiiiIi11i
 iI1 = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&fanart=" + urllib . quote_plus ( fanart )
 i1iI = True
 if date == '' :
  date = None
 else :
  description += '\n\nDate: %s' % date
 oOo0 = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 oOo0 . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description , "Genre" : genre , "dateadded" : date , "credits" : credits } )
 oOo0 . setProperty ( "Fanart_Image" , fanart )
 if showcontext :
  iiII11I = [ ]
  if showcontext == 'source' :
   if name in str ( OooO0OO ) :
    iiII11I . append ( ( 'Remove from Sources' , 'XBMC.RunPlugin(%s?mode=8&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
  elif showcontext == 'download' :
   iiII11I . append ( ( 'Download' , 'XBMC.RunPlugin(%s?url=%s&mode=9&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
  elif showcontext == 'fav' :
   iiII11I . append ( ( 'Remove from Pauls World Favorites' , 'XBMC.RunPlugin(%s?mode=6&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
   if 32 - 32: Ii1I % II - oo000 % O0oo0OO0 . I1i1iI1i
  if not name in I1I11I1I1I :
   iiII11I . append ( ( 'Add to Pauls World Favorites' , 'XBMC.RunPlugin(%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage ) , urllib . quote_plus ( fanart ) , mode ) ) )
  oOo0 . addContextMenuItems ( iiII11I )
 i1iI = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = iI1 , listitem = oOo0 , isFolder = True )
 if 47 - 47: iii1I1I % i1IIi + i1IIi
 return i1iI
def OO0O00OoOOOo ( url , title , media_type = 'video' ) :
 import youtubedl
 if not url == '' :
  if media_type == 'audio' :
   youtubedl . single_YD ( url , download = True , audio = True )
  else :
   youtubedl . single_YD ( url , download = True )
 elif xbmc . Player ( ) . isPlaying ( ) == True :
  import YDStreamExtractor
  if YDStreamExtractor . isDownloading ( ) == True :
   if 77 - 77: iIii1I11I1II1 . O00oOoOoO0o0O % iiiiIi11i / O00oOoOoO0o0O
   YDStreamExtractor . manageDownloads ( )
  else :
   oOO0OO = xbmc . Player ( ) . getPlayingFile ( )
   if 82 - 82: O0O % IiIi11iIIi1Ii % Ii1I / O0
   oOO0OO = oOO0OO . split ( '|User-Agent=' ) [ 0 ]
   O00 = { 'url' : oOO0OO , 'title' : title , 'media_type' : media_type }
   youtubedl . single_YD ( '' , download = True , dl_info = O00 )
 else :
  xbmc . executebuiltin ( "XBMC.Notification(DOWNLOAD,First Play [COLOR yellow]WHILE playing download[/COLOR] ,10000)" )
  if 94 - 94: o0OOO + o0OOO + OoooooooOO % II
def i1IIIi111Ii ( site_name , search_term = None ) :
 I1IiiI = ''
 if os . path . exists ( oo0o0O00 ) == False or i11 . getSetting ( 'clearseachhistory' ) == 'true' :
  ii ( oo0o0O00 , '' )
  i11 . setSetting ( "clearseachhistory" , "false" )
 if site_name == 'history' :
  Ooo00o0Oooo = I11oo0ooOO ( oo0o0O00 )
  Oo0O00Oo0o0 = re . compile ( '(.+?):(.*?)(?:\r|\n)' ) . findall ( Ooo00o0Oooo )
  if 15 - 15: IiIi11iIIi1Ii
  for O00O0oOO00O00 , search_term in Oo0O00Oo0o0 :
   if 'plugin://' in search_term :
    i1i ( search_term , O00O0oOO00O00 , I1IiiI , '' , '' , '' , '' , '' , None , '' , total = int ( len ( Oo0O00Oo0o0 ) ) )
   else :
    oo0oooooO0 ( O00O0oOO00O00 + ':' + search_term , O00O0oOO00O00 , 26 , I1IiIiiIII , iI11 , '' , '' , '' , '' )
 if not search_term :
  O0o0 = xbmc . Keyboard ( '' , 'Enter Search Term' )
  O0o0 . doModal ( )
  if ( O0o0 . isConfirmed ( ) == False ) :
   return
  search_term = O0o0 . getText ( )
  if len ( search_term ) == 0 :
   return
 search_term = search_term . replace ( ' ' , '+' )
 search_term = search_term . encode ( 'utf-8' )
 if 'youtube' in site_name :
  import _ytplist
  if 39 - 39: Ii1I / o0OOO / oOooOoO0Oo0O * I1i1iI1i
  Iii1Ii = { }
  Iii1Ii = _ytplist . YoUTube ( 'searchYT' , youtube = search_term , max_page = 4 , nosave = 'nosave' )
  OOooooO0Oo = len ( Iii1Ii )
  for iiIiIIIiiI in Iii1Ii :
   try :
    O00O0oOO00O00 = Iii1Ii [ iiIiIIIiiI ] [ 'title' ]
    iI = Iii1Ii [ iiIiIIIiiI ] [ 'date' ]
    try :
     ii11I11i = Iii1Ii [ iiIiIIIiiI ] [ 'desc' ]
    except Exception :
     ii11I11i = 'UNAVAIABLE'
     if 71 - 71: IIiI1I11i11 / IiIi11iIIi1Ii + Ii1I
    ii1ii11IIIiiI = 'plugin://plugin.video.youtube/play/?video_id=' + Iii1Ii [ iiIiIIIiiI ] [ 'url' ]
    I1IiiI = 'http://img.youtube.com/vi/' + Iii1Ii [ iiIiIIIiiI ] [ 'url' ] + '/0.jpg'
    i1i ( ii1ii11IIIiiI , O00O0oOO00O00 , I1IiiI , '' , '' , '' , '' , '' , None , '' , OOooooO0Oo )
   except Exception :
    OO ( 'This item is ignored::' )
  i11i11 = site_name + ':' + search_term + '\n'
  ii ( os . path . join ( Oo0o0000o0o0 , 'history' ) , i11i11 , append = True )
 elif 'dmotion' in site_name :
  i1iiIII1IIiIIII = "https://api.dailymotion.com"
  import _DMsearch
  I1iIIII1 = str ( i11 . getSetting ( 'familyFilter' ) )
  _DMsearch . listVideos ( i1iiIII1IIiIIII + "/videos?fields=description,duration,id,owner.username,taken_time,thumbnail_large_url,title,views_total&search=" + search_term + "&sort=relevance&limit=100&family_filter=" + I1iIIII1 + "&localization=en_EN&page=1" )
  if 57 - 57: oo000 . iIii1I11I1II1 % II % O00oOoOoO0o0O * oo000
  i11i11 = site_name + ':' + search_term + '\n'
  ii ( os . path . join ( Oo0o0000o0o0 , 'history' ) , i11i11 , append = True )
 elif 'IMDBidplay' in site_name :
  i1iiIII1IIiIIII = "http://www.omdbapi.com/?t="
  ii1ii11IIIiiI = i1iiIII1IIiIIII + search_term
  if 8 - 8: oo000 . II % iiiiIi11i . oOooOoO0Oo0O % oOooOoO0Oo0O . O00oOoOoO0o0O
  ooOO00oOo = dict ( headers = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' , 'Referer' : 'http://joker.org/' , 'Accept-Encoding' : 'gzip, deflate' , 'Content-Type' : 'application/json;charset=utf-8' , 'Accept' : 'application/json, text/plain, */*' } )
  if 47 - 47: iii1I1I + II + i11i % i11iIiiIii
  ooO = requests . get ( ii1ii11IIIiiI , headers = ooOO00oOo )
  ii1I = ooO . json ( )
  OOoOoo00Oo = ii1I [ 'Response' ]
  if OOoOoo00Oo == 'True' :
   Iiii1iiiIiI1 = ii1I [ 'imdbID' ]
   O00O0oOO00O00 = ii1I [ 'Title' ] + ii1I [ 'Released' ]
   o0OO00 = xbmcgui . Dialog ( )
   IiIII1i1i = o0OO00 . yesno ( 'Check Movie Title' , 'PLAY :: %s ?' % O00O0oOO00O00 )
   if IiIII1i1i :
    ii1ii11IIIiiI = 'plugin://plugin.video.pulsar/movie/' + Iiii1iiiIiI1 + '/play'
    i11i11 = O00O0oOO00O00 + ':' + ii1ii11IIIiiI + '\n'
    ii ( oo0o0O00 , i11i11 , append = True )
    return ii1ii11IIIiiI
  else :
   xbmc . executebuiltin ( "XBMC.Notification(Pauls World,No IMDB match found ,7000," + I1IiIiiIII + ")" )
   if 27 - 27: O00oOoOoO0o0O + oOooOoO0Oo0O * iIii1I11I1II1 . OoooooooOO * oo000
def OOOo ( string ) :
 if isinstance ( string , basestring ) :
  if isinstance ( string , unicode ) :
   string = string . encode ( 'ascii' , 'ignore' )
 return string
def o0ooOo00O ( string , encoding = 'utf-8' ) :
 if isinstance ( string , basestring ) :
  if not isinstance ( string , unicode ) :
   string = unicode ( string , encoding , 'ignore' )
 return string
def Ii1i1I1 ( s ) : return "" . join ( filter ( lambda O0O00OooO : ord ( O0O00OooO ) < 128 , s ) )
if 40 - 40: iii1I1I % OoooooooOO - Ii1I + IiIi11iIIi1Ii / Ii1I
def ooOiii1 ( command ) :
 ii1I = ''
 try :
  ii1I = xbmc . executeJSONRPC ( o0ooOo00O ( command ) )
 except UnicodeEncodeError :
  ii1I = xbmc . executeJSONRPC ( OOOo ( command ) )
  if 66 - 66: iiiiIi11i * iIii1I11I1II1 % iIii1I11I1II1 * Oo0ooO0oo0oO - II - Oo0ooO0oo0oO
 return o0ooOo00O ( ii1I )
 if 70 - 70: I1i1iI1i + iiiiIi11i
def ooO0oOOooOo0 ( ) :
 o00ooo0 = xbmc . getSkinDir ( )
 if o00ooo0 == 'skin.confluence' :
  xbmc . executebuiltin ( 'Container.SetViewMode(500)' )
 elif o00ooo0 == 'skin.aeon.nox' :
  xbmc . executebuiltin ( 'Container.SetViewMode(511)' )
 else :
  xbmc . executebuiltin ( 'Container.SetViewMode(500)' )
  if 39 - 39: II . i11i
  if 45 - 45: iiiiIi11i * oo000 / iIii1I11I1II1
def o00ooOoO0 ( url ) :
 IIi11II1II111 = o0ooOo00O ( '{"jsonrpc":"2.0","method":"Files.GetDirectory","params":{"directory":"%s","media":"video","properties":["thumbnail","title","year","dateadded","fanart","rating","season","episode","studio"]},"id":1}' ) % url
 if 55 - 55: II
 o0O0OO0o = json . loads ( ooOiii1 ( IIi11II1II111 ) )
 for Oo0O0OOOoo in o0O0OO0o [ 'result' ] [ 'files' ] :
  url = Oo0O0OOOoo [ 'file' ]
  O00O0oOO00O00 = Ii1i1I1 ( Oo0O0OOOoo [ 'label' ] )
  I1IiiI = Ii1i1I1 ( Oo0O0OOOoo [ 'thumbnail' ] )
  try :
   oOO00oOO = Ii1i1I1 ( Oo0O0OOOoo [ 'fanart' ] )
  except Exception :
   oOO00oOO = ''
  try :
   iI = Oo0O0OOOoo [ 'year' ]
  except Exception :
   iI = ''
  try :
   OOOoOo = Oo0O0OOOoo [ 'episode' ]
   OOoO0oo0O = Oo0O0OOOoo [ 'season' ]
   if OOOoOo == - 1 or OOoO0oo0O == - 1 :
    ii11I11i = ''
   else :
    ii11I11i = '[COLOR yellow] S' + str ( OOoO0oo0O ) + '[/COLOR][COLOR hotpink] E' + str ( OOOoOo ) + '[/COLOR]'
  except Exception :
   ii11I11i = ''
  try :
   iiI1I1ii = Oo0O0OOOoo [ 'studio' ]
   if iiI1I1ii :
    ii11I11i += '\n Studio:[COLOR steelblue] ' + iiI1I1ii [ 0 ] + '[/COLOR]'
  except Exception :
   iiI1I1ii = ''
   if 79 - 79: iIii1I11I1II1
  if Oo0O0OOOoo [ 'filetype' ] == 'file' :
   i1i ( url , O00O0oOO00O00 , I1IiiI , oOO00oOO , ii11I11i , '' , iI , '' , None , '' , total = len ( o0O0OO0o [ 'result' ] [ 'files' ] ) )
   if 81 - 81: Ii1I + iIii1I11I1II1 * I1i1iI1i - iIii1I11I1II1 . Ii1I
  else :
   oo0oooooO0 ( O00O0oOO00O00 , url , 53 , I1IiiI , oOO00oOO , ii11I11i , '' , iI , '' )
   if 48 - 48: iii1I1I . OoooooooOO . oOooOoO0Oo0O . oo000 % o0OOO / O0oo0OO0
def i1i ( url , name , iconimage , fanart , description , genre , date , showcontext , playlist , regexs , total , setCookie = "" ) :
 iiII11I = [ ]
 try :
  name = name . encode ( 'utf-8' )
 except : pass
 i1iI = True
 if 11 - 11: i1IIi % O0O % O0oo0OO0
 if regexs :
  O0Oo0 = '17'
  if 80 - 80: oOooOoO0Oo0O - iIii1I11I1II1 . Ii1I + O0O - I1i1iI1i
  iiII11I . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif any ( x in url for x in IiiIII111iI ) and url . startswith ( 'http' ) :
  O0Oo0 = '19'
  if 5 - 5: O0oo0OO0
  iiII11I . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif url . endswith ( '&mode=18' ) :
  url = url . replace ( '&mode=18' , '' )
  O0Oo0 = '18'
  if 62 - 62: oo000 . OoooooooOO . Ii1I . O0O * O0oo0OO0
  iiII11I . append ( ( '[COLOR white]!!Download!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=23&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
  if i11 . getSetting ( 'dlaudioonly' ) == 'true' :
   iiII11I . append ( ( '!!Download [COLOR seablue]Audio!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=24&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif url . startswith ( 'magnet:?xt=' ) or '.torrent' in url :
  if 78 - 78: iiiiIi11i / O0O - iiiiIi11i * OoooooooOO . oo000
  if '&' in url and not '&amp;' in url :
   url = url . replace ( '&' , '&amp;' )
  url = 'plugin://plugin.video.pulsar/play?uri=' + url
  O0Oo0 = '12'
  if 96 - 96: oOooOoO0Oo0O % i1IIi . IiIi11iIIi1Ii . O0
 else :
  O0Oo0 = '12'
  if 37 - 37: i1IIi - Ii1I % OoooooooOO / Ii1I % II
  iiII11I . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 iI1 = sys . argv [ 0 ] + "?"
 iiIiII11i1 = False
 if 93 - 93: oo000 % iIii1I11I1II1
 if playlist :
  if i11 . getSetting ( 'add_playlist' ) == "false" :
   iI1 += "url=" + urllib . quote_plus ( url ) + "&mode=" + O0Oo0
  else :
   iI1 += "mode=13&name=%s&playlist=%s" % ( urllib . quote_plus ( name ) , urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) ) )
   name = name + '[COLOR magenta] (' + str ( len ( playlist ) ) + ' items )[/COLOR]'
   iiIiII11i1 = True
 else :
  iI1 += "url=" + urllib . quote_plus ( url ) + "&mode=" + O0Oo0
 if regexs :
  iI1 += "&regexs=" + regexs
 if not setCookie == '' :
  iI1 += "&setCookie=" + urllib . quote_plus ( setCookie )
  if 90 - 90: oOooOoO0Oo0O - Ii1I / O00oOoOoO0o0O / O0 / iii1I1I
 if date == '' :
  date = None
 else :
  description += '\n\nDate: %s' % date
 oOo0 = xbmcgui . ListItem ( name , iconImage = "DefaultVideo.png" , thumbnailImage = iconimage )
 oOo0 . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description , "Genre" : genre , "dateadded" : date } )
 oOo0 . setProperty ( "Fanart_Image" , fanart )
 if 87 - 87: oo000 / Oo0ooO0oo0oO + iIii1I11I1II1
 if ( not iiIiII11i1 ) and not any ( x in url for x in Oo ) :
  if regexs :
   if '$pyFunction:playmedia(' not in urllib . unquote_plus ( regexs ) and 'notplayable' not in urllib . unquote_plus ( regexs ) :
    oOo0 . setProperty ( 'IsPlayable' , 'true' )
  else :
   oOo0 . setProperty ( 'IsPlayable' , 'true' )
 else :
  OO ( 'NOT setting isplayable' + url )
  if 93 - 93: iIii1I11I1II1 + iiiiIi11i % II
 if showcontext :
  iiII11I = [ ]
  if showcontext == 'fav' :
   iiII11I . append (
 ( 'Remove from Pauls World Favorites' , 'XBMC.RunPlugin(%s?mode=6&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) )
 )
  elif not name in I1I11I1I1I :
   iii1IiI1I1 = (
 '%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=0'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage ) , urllib . quote_plus ( fanart ) )
 )
   if playlist :
    iii1IiI1I1 += 'playlist=' + urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) )
   if regexs :
    iii1IiI1I1 += "&regexs=" + regexs
   iiII11I . append ( ( 'Add to Pauls World Favorites' , 'XBMC.RunPlugin(%s)' % iii1IiI1I1 ) )
  oOo0 . addContextMenuItems ( iiII11I )
  if 64 - 64: II / O0 * oo000 * II
 if not playlist is None :
  if i11 . getSetting ( 'add_playlist' ) == "false" :
   O00oo = name . split ( ') ' ) [ 1 ]
   OoOo0oO0o = [
 ( 'Play ' + O00oo + ' PlayList' , 'XBMC.RunPlugin(%s?mode=13&name=%s&playlist=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( O00oo ) , urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) ) ) )
 ]
   oOo0 . addContextMenuItems ( OoOo0oO0o )
 i1iI = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = iI1 , listitem = oOo0 , totalItems = total )
 return i1iI
 if 54 - 54: O0oo0OO0 % i1IIi + o0OOO
def IiiIiIi111iI1 ( url , name , iconimage , setresolved = True ) :
 if setresolved :
  oOo0 = xbmcgui . ListItem ( name , iconImage = iconimage )
  oOo0 . setInfo ( type = 'Video' , infoLabels = { 'Title' : name } )
  oOo0 . setProperty ( "IsPlayable" , "true" )
  oOo0 . setPath ( str ( url ) )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , oOo0 )
 else :
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + url + ')' )
  if 88 - 88: IIiI1I11i11 % iiiiIi11i + Oo0ooO0oo0oO
  if 8 - 8: i11iIiiIii / i11i + IiIi11iIIi1Ii * O00oOoOoO0o0O % Oo0ooO0oo0oO . iii1I1I
  if 6 - 6: Oo0ooO0oo0oO % IIiI1I11i11 . IIiI1I11i11 - o0OOO / iii1I1I . i1IIi
  if 99 - 99: oo000 . I1i1iI1i
def iiii111II ( link ) :
 ii1ii11IIIiiI = urllib . urlopen ( link )
 O0oO = ii1ii11IIIiiI . read ( )
 ii1ii11IIIiiI . close ( )
 IiIII = O0oO . split ( "Jetzt" )
 IIiI1111i1 = IiIII [ 1 ] . split ( 'programm/detail.php?const_id=' )
 ii1ii1I1IIi1 = IIiI1111i1 [ 1 ] . split ( '<br /><a href="/' )
 oOOoo0 = ii1ii1I1IIi1 [ 0 ] [ 40 : len ( ii1ii1I1IIi1 [ 0 ] ) ]
 IIIIiI11I = IIiI1111i1 [ 2 ] . split ( "</a></p></div>" )
 iiiI11iIIi1 = IIIIiI11I [ 0 ] [ 17 : len ( IIIIiI11I [ 0 ] ) ]
 iiiI11iIIi1 = iiiI11iIIi1 . encode ( 'utf-8' )
 return "  - " + iiiI11iIIi1 + " - " + oOOoo0
 if 72 - 72: O0oo0OO0 * Ii1I
 if 67 - 67: i1IIi
def oo00oO0o ( url , regex ) :
 ii1I = oOoO ( url )
 try :
  iiIiIIIiiI = re . findall ( regex , ii1I ) [ 0 ]
  return iiIiIIIiiI
 except :
  OO ( 'regex failed' )
  OO ( regex )
  return
  if 5 - 5: i11i . OoooooooOO
  if 57 - 57: oOooOoO0Oo0O
xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , 'movies' )
if 35 - 35: OoooooooOO - I1i1iI1i / O0O
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_UNSORTED )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_LABEL )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_DATE )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_GENRE )
except :
 pass
 if 50 - 50: oo000
oO000o = Ooo0 ( )
if 33 - 33: iii1I1I
ii1ii11IIIiiI = None
O00O0oOO00O00 = None
O0Oo0 = None
i11ii1ii11i = None
i1II11II1 = None
oOO00oOO = iI11
i11ii1ii11i = None
oOo00OoO0O = None
I1Ii1I1 = None
if 69 - 69: iIii1I11I1II1 * oOooOoO0Oo0O - O0oo0OO0 + O0 + O0
try :
 ii1ii11IIIiiI = urllib . unquote_plus ( oO000o [ "url" ] ) . decode ( 'utf-8' )
except :
 pass
try :
 O00O0oOO00O00 = urllib . unquote_plus ( oO000o [ "name" ] )
except :
 pass
try :
 i1II11II1 = urllib . unquote_plus ( oO000o [ "iconimage" ] )
except :
 pass
try :
 oOO00oOO = urllib . unquote_plus ( oO000o [ "fanart" ] )
except :
 pass
try :
 O0Oo0 = int ( oO000o [ "mode" ] )
except :
 pass
try :
 i11ii1ii11i = eval ( urllib . unquote_plus ( oO000o [ "playlist" ] ) . replace ( '||' , ',' ) )
except :
 pass
try :
 oOo00OoO0O = int ( oO000o [ "fav_mode" ] )
except :
 pass
try :
 I1Ii1I1 = oO000o [ "regexs" ]
except :
 pass
 if 65 - 65: I1i1iI1i / i11iIiiIii / O0O - Ii1I
OO ( "Mode: " + str ( O0Oo0 ) )
if not ii1ii11IIIiiI is None :
 OO ( "URL: " + str ( ii1ii11IIIiiI . encode ( 'utf-8' ) ) )
OO ( "Name: " + str ( O00O0oOO00O00 ) )
if 9 - 9: oOooOoO0Oo0O / I1i1iI1i - IIiI1I11i11 * iIii1I11I1II1
if O0Oo0 == None :
 OO ( "Index" )
 oo ( )
 if 86 - 86: i11i + II + Oo0ooO0oo0oO
elif O0Oo0 == 1 :
 OO ( "getData" )
 O0o0Oo ( ii1ii11IIIiiI , oOO00oOO )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 9 - 9: II + i11i % II % Oo0ooO0oo0oO + iIii1I11I1II1
elif O0Oo0 == 2 :
 OO ( "getChannelItems" )
 I1Ii11i ( O00O0oOO00O00 , ii1ii11IIIiiI , oOO00oOO )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 59 - 59: i1IIi
elif O0Oo0 == 3 :
 OO ( "getSubChannelItems" )
 ooiIi1 ( O00O0oOO00O00 , ii1ii11IIIiiI , oOO00oOO )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 48 - 48: O0 * O00oOoOoO0o0O * O0O . O0O * iii1I1I - O00oOoOoO0o0O
elif O0Oo0 == 4 :
 OO ( "getFavorites" )
 OoOoOo0 ( )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 14 - 14: o0OOO + i11iIiiIii
elif O0Oo0 == 5 :
 OO ( "addFavorite" )
 try :
  O00O0oOO00O00 = O00O0oOO00O00 . split ( '\\ ' ) [ 1 ]
 except :
  pass
 try :
  O00O0oOO00O00 = O00O0oOO00O00 . split ( '  - ' ) [ 0 ]
 except :
  pass
 oo0000o ( O00O0oOO00O00 , ii1ii11IIIiiI , i1II11II1 , oOO00oOO , oOo00OoO0O )
 if 83 - 83: o0OOO / i11iIiiIii + i11i . O0oo0OO0 * Ii1I + Oo0ooO0oo0oO
elif O0Oo0 == 6 :
 OO ( "rmFavorite" )
 try :
  O00O0oOO00O00 = O00O0oOO00O00 . split ( '\\ ' ) [ 1 ]
 except :
  pass
 try :
  O00O0oOO00O00 = O00O0oOO00O00 . split ( '  - ' ) [ 0 ]
 except :
  pass
 ooooOoO0O ( O00O0oOO00O00 )
 if 42 - 42: i1IIi % i11i . II
elif O0Oo0 == 7 :
 OO ( "addSource" )
 O0oo0OO0oOOOo ( ii1ii11IIIiiI )
 if 7 - 7: o0OOO - iiiiIi11i * Ii1I + IiIi11iIIi1Ii . o0OOO
elif O0Oo0 == 8 :
 OO ( "rmSource" )
 iII ( O00O0oOO00O00 )
 if 85 - 85: O0
elif O0Oo0 == 9 :
 OO ( "download_file" )
 IiiiI ( O00O0oOO00O00 , ii1ii11IIIiiI )
 if 32 - 32: OoooooooOO . O0O / IIiI1I11i11 * IiIi11iIIi1Ii / IiIi11iIIi1Ii * O00oOoOoO0o0O
elif O0Oo0 == 10 :
 OO ( "getCommunitySources" )
 I11OoOoOOOoOO ( )
 if 19 - 19: O00oOoOoO0o0O
elif O0Oo0 == 11 :
 OO ( "addSource" )
 O0oo0OO0oOOOo ( ii1ii11IIIiiI )
 if 55 - 55: Ii1I % Ii1I / O0 % O0oo0OO0 - IiIi11iIIi1Ii . IIiI1I11i11
elif O0Oo0 == 12 :
 OO ( "setResolvedUrl" )
 if not ii1ii11IIIiiI . startswith ( "plugin://plugin" ) or not any ( x in ii1ii11IIIiiI for x in Oo ) :
  iiIiIIIiiI = xbmcgui . ListItem ( path = ii1ii11IIIiiI )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , iiIiIIIiiI )
 else :
  print 'Not setting setResolvedUrl'
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + ii1ii11IIIiiI + ')' )
  if 49 - 49: iIii1I11I1II1 * i1IIi . OoooooooOO
  if 90 - 90: IiIi11iIIi1Ii % o0OOO - iIii1I11I1II1 % oo000
elif O0Oo0 == 13 :
 OO ( "play_playlist" )
 I1IIIIiii1i ( O00O0oOO00O00 , i11ii1ii11i )
 if 8 - 8: oo000 * IIiI1I11i11 / Oo0ooO0oo0oO % O00oOoOoO0o0O - oOooOoO0Oo0O
elif O0Oo0 == 14 :
 OO ( "get_xml_database" )
 iIii ( ii1ii11IIIiiI )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 71 - 71: O0oo0OO0
elif O0Oo0 == 15 :
 OO ( "browse_xml_database" )
 iIii ( ii1ii11IIIiiI , True )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 23 - 23: i1IIi . iIii1I11I1II1 . Ii1I . O0 % O00oOoOoO0o0O % i11iIiiIii
elif O0Oo0 == 16 :
 OO ( "browse_community" )
 I11OoOoOOOoOO ( True )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 11 - 11: O0 - i11i . Ii1I . O00oOoOoO0o0O % I1i1iI1i
elif O0Oo0 == 17 :
 OO ( "getRegexParsed" )
 ii1ii11IIIiiI , oOoO0 = ooOii ( I1Ii1I1 , ii1ii11IIIiiI )
 if ii1ii11IIIiiI :
  IiiIiIi111iI1 ( ii1ii11IIIiiI , O00O0oOO00O00 , i1II11II1 , oOoO0 )
 else :
  xbmc . executebuiltin ( "XBMC.Notification(Pauls World,Failed to extract regex. - " + "this" + ",4000," + I1IiIiiIII + ")" )
elif O0Oo0 == 18 :
 OO ( "youtubedl" )
 try :
  import youtubedl
 except Exception :
  xbmc . executebuiltin ( "XBMC.Notification(Pauls World,Please [COLOR blue]install Youtube-dl[/COLOR] module ,10000," ")" )
 I1I11i = youtubedl . single_YD ( ii1ii11IIIiiI )
 IiiIiIi111iI1 ( I1I11i , O00O0oOO00O00 , i1II11II1 )
elif O0Oo0 == 19 :
 OO ( "Genesiscommonresolvers" )
 IiiIiIi111iI1 ( Oo0O0 ( ii1ii11IIIiiI ) , O00O0oOO00O00 , i1II11II1 , True )
 if 21 - 21: IIiI1I11i11 / O0oo0OO0 . I1i1iI1i * OoooooooOO + iii1I1I - i1IIi
elif O0Oo0 == 21 :
 OO ( "download current file using youtube-dl service" )
 OO0O00OoOOOo ( '' , O00O0oOO00O00 , 'video' )
elif O0Oo0 == 23 :
 OO ( "get info then download" )
 OO0O00OoOOOo ( ii1ii11IIIiiI , O00O0oOO00O00 , 'video' )
elif O0Oo0 == 24 :
 OO ( "Audio only youtube download" )
 OO0O00OoOOOo ( ii1ii11IIIiiI , O00O0oOO00O00 , 'audio' )
elif O0Oo0 == 25 :
 OO ( "YouTube/DMotion" )
 i1IIIi111Ii ( ii1ii11IIIiiI )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
elif O0Oo0 == 26 :
 OO ( "YouTube/DMotion From Search History" )
 O00O0oOO00O00 = O00O0oOO00O00 . split ( ':' )
 i1IIIi111Ii ( ii1ii11IIIiiI , search_term = O00O0oOO00O00 [ 1 ] )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
elif O0Oo0 == 27 :
 OO ( "Using IMDB id to play in Pulsar" )
 ooooo0O0 = i1IIIi111Ii ( ii1ii11IIIiiI )
 xbmc . Player ( ) . play ( ooooo0O0 )
elif O0Oo0 == 30 :
 oooOo0OOOoo0 ( O00O0oOO00O00 , ii1ii11IIIiiI , i1II11II1 , oOO00oOO )
 if 10 - 10: iii1I1I - IIiI1I11i11
elif O0Oo0 == 40 :
 SearchChannels ( )
 ooO0oOOooOo0 ( )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 59 - 59: OoooooooOO * IIiI1I11i11 + i1IIi
elif O0Oo0 == 41 :
 Ii1iIiII1ii1 ( ii1ii11IIIiiI )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 23 - 23: II
elif O0Oo0 == 53 :
 OO ( "Requesting JSON-RPC Items" )
 o00ooOoO0 ( ii1ii11IIIiiI )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
]')